/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package dita.tooling.domgen;

import java.io.File;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.springframework.javapoet.ClassName;
import org.springframework.javapoet.JavaFile;
import org.springframework.javapoet.TypeSpec;
import org.springframework.util.ReflectionUtils;

import org.apache.causeway.commons.collections.Can;
import org.apache.causeway.commons.internal.base._Strings;

import dita.tooling.orm.OrmModel;
import lombok.Builder;
import lombok.NonNull;
import lombok.Value;
import lombok.val;
import lombok.experimental.Accessors;

public record DomainGenerator(@NonNull DomainGenerator.Config config) {

    @Value @Builder @Accessors(fluent=true)
    public static class Config {
        @Builder.Default
        private final @NonNull String logicalNamespacePrefix = "";
        @Builder.Default
        private final @NonNull String packageNamePrefix = "";
        @Builder.Default
        private final @NonNull LicenseHeader licenseHeader = LicenseHeader.NONE;
        private final @NonNull OrmModel.Schema schema;
        @Builder.Default
        private final @NonNull String entitiesModulePackageName = "";
        @Builder.Default
        private final @NonNull String entitiesModuleClassSimpleName = "EntitiesModule";

        public String fullLogicalName(final String realativeName) {
            return Can.of(
                    _Strings.emptyToNull(logicalNamespacePrefix()),
                    _Strings.emptyToNull(realativeName))
                    .stream()
                    .collect(Collectors.joining("."));
        }
        public String fullPackageName(final String realativeName) {
            return Can.of(
                    _Strings.emptyToNull(packageNamePrefix()),
                    _Strings.emptyToNull(realativeName))
                    .stream()
                    .collect(Collectors.joining("."));
        }
    }

    public record JavaModel(
            @NonNull String logicalTypeName,
            @NonNull ClassName className,
            @NonNull TypeSpec typeSpec,
            @NonNull LicenseHeader licenseHeader) {

        public JavaModel(
                final String logicalName,
                final String packageName,
                final TypeSpec typeSpec,
                final LicenseHeader licenseHeader) {
            this(
                    logicalName,
                    ClassName.get(
                        packageName,
                        (String) ReflectionUtils.getField(ReflectionUtils.findField(typeSpec.getClass(), "name"), typeSpec)
                    ),
                    typeSpec,
                    licenseHeader);
        }
        /**
         * Does not include license header, this is only written later via {@link _DomainWriter}.
         */
        public JavaFile buildJavaFile() {
            val javaFileBuilder = JavaFile.builder(className().packageName(), typeSpec)
                    .addFileComment("Auto-generated by DitA-Tooling");
            return javaFileBuilder.build();
        }
    }

    public Stream<JavaModel> streamAsJavaModels() {
        val javaModels = new ArrayList<JavaModel>();
        val entityModels = config().schema().entities().values().stream().toList();

        javaModels.add(_GenEntitiesModule.toJavaModel(entityModels, config()));

        entityModels.stream()
            .map(entityModel->_GenEntity.toJavaModel(entityModel, config()))
            .forEach(javaModels::add);

        return javaModels.stream();
    }

    public void writeToDirectory(final @NonNull File dest) {
        _DomainWriter.writeToDirectory(streamAsJavaModels(), dest);
    }

}
