/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package dita.globodiet.manager.blobstore;

import java.io.File;
import java.util.Optional;

import jakarta.inject.Inject;
import jakarta.inject.Named;

import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.ActionLayout;
import org.apache.causeway.applib.annotation.ActionLayout.Position;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.Navigable;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.SemanticsOf;
import org.apache.causeway.applib.annotation.Snapshot;
import org.apache.causeway.applib.annotation.Where;
import org.apache.causeway.applib.services.factory.FactoryService;
import org.apache.causeway.applib.value.Blob;
import org.apache.causeway.commons.internal.base._Strings;
import org.apache.causeway.commons.io.DataSink;
import org.apache.causeway.commons.io.DataSource;
import org.apache.causeway.commons.io.YamlUtils;

import dita.globodiet.manager.DitaModuleGdManager;
import dita.globodiet.manager.FontawesomeConstants;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Setter;
import lombok.val;

@DomainObject(nature=Nature.VIEW_MODEL)
@Named(DitaModuleGdManager.NAMESPACE + ".ParameterDataVersion")
//@DomainObjectLayout(
//        cssClassFa = FontawesomeConstants.ICON_VERSION)
@NoArgsConstructor
public class ParameterDataVersion {

    @Inject BlobStore blobStore;
    @Inject FactoryService factoryService;

    // -- FACTORIES

    public static ParameterDataVersion fromDirectory(final @NonNull File dir) {
        val dataSource = DataSource.ofFile(new File(dir, "manifest.yml"));
        val paramDataVersion = YamlUtils.tryRead(ParameterDataVersion.class, dataSource)
            .valueAsNonNullElseFail();
        return paramDataVersion;
    }

    // -- IMPL

    @ObjectSupport
    public String title() {
        return String.format("Parameter-Data [%s]", getName());
    }

    @ObjectSupport
    public String iconName() {
        return isCommitted()
                ? "solid"
                : "regular";
    }

    @Property(optionality = Optionality.MANDATORY)
    @PropertyLayout(describedAs = "Autogenerated IDENTIFIER of this version.")
    @Getter @Setter
    private int __id;

    @Property(optionality = Optionality.MANDATORY)
    @PropertyLayout(describedAs = "Arbitrary NAME of this version.")
    @Getter @Setter
    private String name;

    @Property
    @PropertyLayout(multiLine = 4)
    @Getter @Setter
    private String description;

    @Property
    @PropertyLayout(describedAs = "If COMMITTED, one can no longer EDIT this version, "
            + "but it can be checked out for VIEWING.")
    @Getter @Setter
    private boolean committed;

    @Property
    @PropertyLayout(describedAs = "If DELETED, does no longer appear in the user interface, "
            + "but can be RESTORED by an administrator.")
    @Getter @Setter
    private boolean deleted;

    @Property
    @PropertyLayout(describedAs = "If STICKY, cannot be deleted.")
    @Getter @Setter
    private boolean sticky;

    // -- BREADCRUMB

    @Property(snapshot = Snapshot.EXCLUDED)
    @PropertyLayout(hidden = Where.EVERYWHERE, navigable = Navigable.PARENT)
    public BlobStoreView getBlobStoreView() {
        return factoryService.viewModel(new BlobStoreView());
    }

    // -- [1] CHECKOUT

    @Action
    @ActionLayout(
            describedAs = "Checkout this version for VIEWING or EDITING, "
                    + "based on whether was already committed or not.",
            sequence = "1",
            fieldSetName="Details",
            position = Position.PANEL,
            cssClassFa = FontawesomeConstants.FA_CLOUD_ARROW_DOWN_SOLID,
            cssClass = "btn-primary")
    public String checkout() {
        blobStore.checkout(this);
        return String.format("Version '%s' checked out.", name);
    }
    @MemberSupport public String disableCheckout() {
        return guardAgainstDeleted()
                .or(()->guardAgainstThisVersionAlreadyCheckedOut("This version is already checked out."))
                .orElse(null);
    }

    // -- [2] CLONE

    @Action
    @ActionLayout(
            describedAs = "Clone this version for EDITING under a new IDENTITY.",
            sequence = "2",
            fieldSetName="Details",
            position = Position.PANEL,
            cssClassFa = FontawesomeConstants.FA_CLONE_SOLID)
    public String clone(
            @Parameter(optionality = Optionality.MANDATORY)
            final String clonedVersionName,

            @Parameter(optionality = Optionality.OPTIONAL)
            @ParameterLayout(multiLine = 4)
            final String clonedVersionDescription) {

        var cloneRequest = new ParameterDataVersion();
        cloneRequest.setName(clonedVersionName);
        cloneRequest.setDescription(clonedVersionDescription);
        cloneRequest.setCommitted(false);

        blobStore.clone(this, cloneRequest);
        return String.format("Version '%s' cloned as '%s'.", name, clonedVersionName);
    }
    @MemberSupport public String disableClone() {
        return guardAgainstDeleted()
                .orElse(null);
    }
    @MemberSupport public String default0Clone() {
        return String.format("%s (Clone)", getName());
    }
    @MemberSupport public String default1Clone() {
        return _Strings.isNotEmpty(getDescription())
                ? String.format("%s (Cloned)", getDescription())
                : null;
    }

    // -- [3] COMMIT

    @Action
    @ActionLayout(
            sequence = "3",
            named = "Commit / Generate BAK",
            describedAs = "Generates a BAK file, "
                    + "that is made available for download. "
                    + "Also locks this version (disables further EDITING).",
            fieldSetName="Details",
            position = Position.PANEL,
            cssClassFa = FontawesomeConstants.FA_CLOUD_ARROW_UP_SOLID,
            cssClass = "btn-success")
    public String commitAndGenerateBAK() {
        //TODO (1) generate BAK file (2) on success transition to committed state
        //TODO this is perhaps a long runner, need some other feedback mechanism
        return String.format("Version '%s' committed and locked (further editing is disabled, can only be viewed). "
                + "A BAK file was generated and made available for download.", name);
    }
    @MemberSupport public String disableCommitAndGenerateBAK() {
        return guardAgainstDeleted() // just in case
                .orElse("TODO: will be implemented");
    }

    // -- [4] BAK DOWNLOAD

    @Action
    @ActionLayout(
            sequence = "4",
            describedAs = "MS-SQL Server backup file, that can be imported with the GloboDiet client application.",
            fieldSetName="Details",
            position = Position.PANEL)
    public Blob downloadBAK() {
        return blobStore.getBAK(this);
    }
    @MemberSupport public String disableDownloadBAK() {
        return guardAgainstDeleted() // just in case
                .or(()->guardAgainstNotCommitted("Commit this version, for a BAK download to become available."))
                .orElse(null);
    }

    // -- [5] DELETE

    @Action(semantics = SemanticsOf.IDEMPOTENT_ARE_YOU_SURE)
    @ActionLayout(
            sequence = "5",
            describedAs = "Does not actually delete from blob-store, just changes the manifest, "
                    + "such that given version no longer appears in the user interface.",
            fieldSetName="Details",
            position = Position.PANEL)
    public String delete() {
        blobStore.delete(this);
        return String.format("Version '%s' was deleted, that is, it no longer appears in the user interface. "
                + "However, it can be restored by an administrator.", name);
    }
    @MemberSupport public String disableDelete() {
        return guardAgainstDeleted() // just in case
                .or(()->guardAgainstSticky("This version is marked STICKY by an administrator, hence cannot be deleted."))
                .orElse(null);
    }

    // -- UTILITY

    @Programmatic
    void writeManifest(final @NonNull File dir) {
        val dataSink = DataSink.ofFile(new File(dir, "manifest.yml"));
        YamlUtils.write(this, dataSink);
    }

    // -- HELPER

    Optional<String> guardAgainstDeleted() {
        return isDeleted()
            ? Optional.of("This version was deleted.")
            : Optional.empty();
    }

    Optional<String> guardAgainstSticky(final String message) {
        return isSticky()
            ? Optional.of(message)
            : Optional.empty();
    }

    Optional<String> guardAgainstCommitted(final String message) {
        return isCommitted()
            ? Optional.of(message)
            : Optional.empty();
    }

    Optional<String> guardAgainstNotCommitted(final String message) {
        return !isCommitted()
            ? Optional.of(message)
            : Optional.empty();
    }

    Optional<String> guardAgainstThisVersionAlreadyCheckedOut(final String message) {
        return Optional.ofNullable(blobStore.getCurrentlyCheckedOutVersion())
                .map(v->this.get__id() == v.get__id())
                .orElse(false)
            ? Optional.of(message)
            : Optional.empty();
    }

}
