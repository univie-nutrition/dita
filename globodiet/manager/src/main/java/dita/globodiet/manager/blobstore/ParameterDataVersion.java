/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package dita.globodiet.manager.blobstore;

import java.io.File;

import jakarta.inject.Inject;
import jakarta.inject.Named;

import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.ActionLayout;
import org.apache.causeway.applib.annotation.ActionLayout.Position;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.value.Blob;
import org.apache.causeway.commons.internal.base._Strings;
import org.apache.causeway.commons.io.DataSource;
import org.apache.causeway.commons.io.YamlUtils;

import dita.globodiet.manager.DitaModuleGdManager;
import dita.globodiet.manager.FontawesomeConstants;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Setter;
import lombok.val;

@DomainObject(nature=Nature.VIEW_MODEL)
@Named(DitaModuleGdManager.NAMESPACE + ".ParameterDataVersion")
@DomainObjectLayout(
        cssClassFa = FontawesomeConstants.ICON_BLOBSTORE)
@NoArgsConstructor
public class ParameterDataVersion {

    @Inject BlobStore blobStore;

    // -- FACTORIES

    public static ParameterDataVersion fromDirectory(final @NonNull File dir) {
        val dataSource = DataSource.ofFile(new File(dir, "manifest.yml"));
        val paramDataVersion = YamlUtils.tryRead(ParameterDataVersion.class, dataSource)
            .valueAsNonNullElseFail();
        return paramDataVersion;
    }

    // -- IMPL

    @ObjectSupport
    public String title() {
        return String.format("Parameter-Data [%s]", getName());
    }

    @Property(optionality = Optionality.MANDATORY)
    @PropertyLayout(describedAs = "Autogenerated identifier of this version.")
    @Getter @Setter
    private int __id;

    @Property(optionality = Optionality.MANDATORY)
    @PropertyLayout(describedAs = "Arbitrary name of this version.")
    @Getter @Setter
    private String name;

    @Property
    @PropertyLayout(multiLine = 4)
    @Getter @Setter
    private String description;

    @Property
    @PropertyLayout(describedAs = "If LOCKED, one can no longer edit this version.")
    @Getter @Setter
    private boolean locked;

    // -- CHECKOUT

    @Action
    @ActionLayout(
            describedAs = "Checkout this version for editing.",
            sequence = "1",
            fieldSetName="Details",
            position = Position.PANEL,
            cssClassFa = FontawesomeConstants.FA_CLOUD_ARROW_DOWN_SOLID)
    public String checkout() {
        blobStore.checkout(this);
        return String.format("Version '%s' checked out.", name);
    }
    @MemberSupport public String disableCheckout() {
        return isLocked()
                ? "Cannot checkout a LOCKED version, use CLONE instead."
                : null;
    }

    // -- CLONE

    @Action
    @ActionLayout(
            describedAs = "Clone this version for editing under a new identity.",
            sequence = "2",
            fieldSetName="Details",
            position = Position.PANEL,
            cssClassFa = FontawesomeConstants.FA_CLONE_SOLID)
    public String clone(
            @Parameter(optionality = Optionality.MANDATORY)
            final String clonedVersionName,

            @Parameter(optionality = Optionality.OPTIONAL)
            @ParameterLayout(multiLine = 4)
            final String clonedVersionDescription) {

        var cloneRequest = new ParameterDataVersion();
        cloneRequest.setName(clonedVersionName);
        cloneRequest.setDescription(clonedVersionDescription);
        cloneRequest.setLocked(false);

        blobStore.clone(this, cloneRequest);
        return String.format("Version '%s' cloned as '%s'.", name, clonedVersionName);
    }
    @MemberSupport public String default0Clone() {
        return String.format("%s (Clone)", getName());
    }
    @MemberSupport public String default1Clone() {
        return _Strings.isNotEmpty(getDescription())
                ? String.format("%s (Cloned)", getDescription())
                : null;
    }

    // -- COMMIT

    @Action
    @ActionLayout(
            sequence = "3",
            describedAs = "Locks this version and generates a "
                    + "BAK file, that is made available for download.",
            fieldSetName="Details",
            position = Position.PANEL,
            cssClassFa = FontawesomeConstants.FA_CLOUD_ARROW_UP_SOLID)
    public String commitAndLock() {
        //TODO (1) generate BAK file
        // (2) transition to locked state
        // (3) load empty version
        return String.format("Version '%s' committed and locked. "
                + "A BAK file was generated and made available for download.", name);
    }
    @MemberSupport public String disableCommitAndLock() {
        return "TODO: will be implemented";
    }

    // -- BAK DOWNLOAD

    @Action
    @ActionLayout(
            sequence = "4",
            describedAs = "MS SQL Server backup file to be used with the GloboDiet client application.",
            fieldSetName="Details",
            position = Position.PANEL)
    public Blob downloadBAK() {
        return blobStore.getBAK(this);
    }
    @MemberSupport public String disableDownloadBAK() {
        return !isLocked()
                ? "Commit this version, for a BAK download to become available."
                : null;
    }

}
