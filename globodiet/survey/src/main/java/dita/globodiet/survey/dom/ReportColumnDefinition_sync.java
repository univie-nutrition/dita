/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.survey.dom;

import jakarta.inject.Inject;

import org.springframework.beans.factory.annotation.Qualifier;

import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.ActionLayout;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.services.factory.FactoryService;
import org.apache.causeway.commons.collections.Can;
import org.apache.causeway.commons.internal.base._Strings;
import org.apache.causeway.commons.io.TextUtils;

import lombok.RequiredArgsConstructor;

import dita.commons.food.composition.FoodComponent;
import dita.globodiet.survey.dom.SurveyDeps.Survey_dependentCampaignMappedBySurvey;
import io.github.causewaystuff.blobstore.applib.BlobStore;
import io.github.causewaystuff.companion.applib.services.lookup.ForeignKeyLookupService;

@Action
@ActionLayout(
        sequence = "1",
        associateWith = "columnListing",
        describedAs = "Synchronize this ReportColumnDefinition with the FCDB catalog "
                + "as associtated with the corresponding survey.",
        position = ActionLayout.Position.BELOW
)
@RequiredArgsConstructor
public class ReportColumnDefinition_sync {

    @Inject private FactoryService factoryService;
    @Inject private ForeignKeyLookupService foreignKeyLookupService;
    @Inject @Qualifier("survey") private BlobStore surveyBlobStore;

    private final ReportColumnDefinition mixee;

    @MemberSupport
    public ReportColumnDefinition act(final DataUtil.LineMergePolicy lineMergePolicy) {
        var survey = foreignKeyLookupService.unique(new Survey.SecondaryKey(mixee.getSurveyCode()));
        var campaigns = factoryService.mixin(Survey_dependentCampaignMappedBySurvey.class, survey)
            .coll();
        var foodCompositionRepo = Campaigns.fcdb(campaigns.getFirst(), surveyBlobStore);
        var allLines = foodCompositionRepo.componentCatalog().streamComponents()
            .map(this::toLine)
            .collect(Can.toCan());

        var currentLines = TextUtils.readLines(mixee.getColumnListing())
            .map(text->DataUtil.Line.parse(text, this::extractKey));

        mixee.setColumnListing(DataUtil.Line.sync(lineMergePolicy, allLines, currentLines).join("\n"));
        return mixee;
    }

    @MemberSupport
    public DataUtil.LineMergePolicy defaultLineMergePolicy() {
        return DataUtil.LineMergePolicy.ADD_NEW_AS_DISABLED;
    }

    // -- HELPER

    private String extractKey(final String line) {
        return _Strings.splitThenStream(line, ":").findFirst().orElseThrow();
    }

    private DataUtil.Line toLine(final FoodComponent foodComponent) {
        return new DataUtil.Line(key(foodComponent), description(foodComponent), true);
    }
    private String key(final FoodComponent foodComponent) {
        return foodComponent.componentId().toStringNoBox();
    }
    private String description(final FoodComponent foodComponent) {
        return foodComponent.toString();
    }

}
