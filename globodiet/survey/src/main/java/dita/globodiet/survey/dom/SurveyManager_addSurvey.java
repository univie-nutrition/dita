/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.survey.dom;

import jakarta.inject.Inject;

import io.github.causewaystuff.blobstore.applib.BlobStore;
import io.github.causewaystuff.companion.applib.services.lookup.ForeignKeyLookupService;

import org.springframework.beans.factory.annotation.Qualifier;

import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.ActionLayout;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.PrecedingParamsPolicy;
import org.apache.causeway.applib.annotation.SemanticsOf;
import org.apache.causeway.applib.services.repository.RepositoryService;
import lombok.RequiredArgsConstructor;

import dita.commons.sid.SemanticIdentifier.SystemId;

@Action(
        semantics = SemanticsOf.IDEMPOTENT
)
@ActionLayout(
        fieldSetId = "listOfSurvey",
        sequence = "1",
        describedAs = "Adds a new Survey",
        position = ActionLayout.Position.PANEL
)
@RequiredArgsConstructor
public class SurveyManager_addSurvey {

    @Inject private RepositoryService repositoryService;
    @Inject private ForeignKeyLookupService foreignKeyLookup;
    @Inject @Qualifier("survey") private BlobStore surveyBlobStore;

    private final Survey.Manager mixee;

    @MemberSupport
    public Survey.Manager act(
        @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY)
        @ParameterLayout(describedAs = "Unique (application scoped) survey identifier.")
        final String code,
        @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY)
        @ParameterLayout(describedAs = "Descriptive survey name.")
        final String name,
        @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY)
        @ParameterLayout(describedAs = "Default Semantic Identifier System Id for this survey. e.g. at.gd/2.0"
            + "\n\nWARNING a new survey also needs to be initialzed by an administrator, "
            + "that is, it needs a FCDB, a FDM and other mapping data!")
        final String systemId) {

        var survey = repositoryService.detachedEntity(new Survey());
        survey.setCode(code);
        survey.setName(name);

        var client = new BlobStoreClient(survey.secondaryKey(), surveyBlobStore);
        client.putSurveyConfig(new SurveyConfig(SystemId.parse(systemId)));

        repositoryService.persist(survey);
        foreignKeyLookup.clearCache(Survey.class);
        return mixee;
    }

    @MemberSupport
    public String validateSystemId(final String systemId) {
        try{
            SystemId.parse(systemId);
            return null;
        } catch (Exception e) {
            return e.getMessage();
        }
    }

}
