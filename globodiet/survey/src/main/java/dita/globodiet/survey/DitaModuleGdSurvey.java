/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.survey;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

import dita.commons.types.ResourceFolder;
import dita.globodiet.survey.util.InterviewUtils;
import dita.globodiet.survey.view.SurveyTreeNode;
import dita.globodiet.survey.view.SurveyTreeNodeFactory;
import dita.globodiet.survey.view.SurveyVM;
import dita.recall24.model.InterviewSet24;

@Configuration
@Import({
    SurveyVM.class
        })
public class DitaModuleGdSurvey {
    public final static String NAMESPACE = "dita.survey";

    //TODO remove (temporary for quick prototyping)
    @Bean @Qualifier("survey")
    public ResourceFolder surveySampleData() {
        return ResourceFolder.testResourceRoot(DitaModuleGdSurvey.class).relative("secret").orElseThrow();
    }

    //TODO replace that with a proper repository
    @Bean
    public SurveyTreeNode surveyTreeRootNode(@Qualifier("survey") final ResourceFolder surveySourcesFolder) {

        var interviewSet =
            InterviewUtils.scanSources(surveySourcesFolder)
            .stream()
            .limit(1)
            .map(InterviewUtils::unzip)
            .map(InterviewUtils::parse)
            .reduce(InterviewSet24::join)
            .orElseThrow()
            .normalized();

        return SurveyTreeNodeFactory
                .surveyNode(interviewSet);
    }

}
