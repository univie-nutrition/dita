/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.survey.dom;

import java.util.List;

import jakarta.inject.Inject;

import org.springframework.beans.factory.annotation.Qualifier;

import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.ActionLayout;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.SemanticsOf;
import org.apache.causeway.applib.exceptions.RecoverableException;
import org.apache.causeway.applib.value.Blob;
import org.apache.causeway.applib.value.NamedWithMimeType.CommonMimeType;
import org.apache.causeway.core.metamodel.context.MetaModelContext;

import lombok.RequiredArgsConstructor;
import lombok.experimental.ExtensionMethod;

import dita.commons.util.BlobUtils;
import dita.globodiet.survey.view.SurveyTreeHelperService;
import io.github.causewaystuff.blobstore.applib.BlobStore;

@Action(
        semantics = SemanticsOf.IDEMPOTENT
)
@ActionLayout(
        fieldSetId = "correctionUploads",
        sequence = "2",
        describedAs = "Uploads an interview correction YAML file.",
        position = ActionLayout.Position.PANEL
)
@RequiredArgsConstructor
@ExtensionMethod({BlobUtils.class})
public class Survey_uploadCorrection {

    @Inject @Qualifier("survey") private BlobStore surveyBlobStore;
    @Inject private SurveyTreeHelperService surveyTreeRootNodeHelperService;

    private final Survey mixee;

    @MemberSupport
    public Survey act(
            @Parameter(fileAccept = ".yaml,.zip")
            @ParameterLayout(
                    describedAs = "Either a single interview correction yaml file or multiple provided as a zip.")
            final Blob interviewFileOrFiles) {

        var client = new BlobStoreClient(mixee.secondaryKey(), surveyBlobStore);
        var createdBy = MetaModelContext.instanceElseFail().getInteractionService().currentInteractionContextElseFail()
            .getUser().name();

        if(interviewFileOrFiles.isZipped()) {
            client.uploadCorrectionYaml(createdBy,
                interviewFileOrFiles.unzipAsBlobStream(CommonMimeType.YAML)
                    .toList());
        } else if(interviewFileOrFiles.isYaml()) {
            client.uploadCorrectionYaml(createdBy, List.of(interviewFileOrFiles));
        } else {
            throw new RecoverableException(String.format("unsupported mime %s%n",
                    interviewFileOrFiles.mimeType().toString()));
        }
        surveyTreeRootNodeHelperService.invalidateCache();
        client.invalidateAllInterviewCaches();
        return mixee;
    }

}
