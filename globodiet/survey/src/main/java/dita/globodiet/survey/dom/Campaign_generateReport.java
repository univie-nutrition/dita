/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.survey.dom;

import java.time.LocalDate;
import java.util.List;

import jakarta.inject.Inject;

import org.springframework.beans.factory.annotation.Qualifier;

import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.ActionLayout;
import org.apache.causeway.applib.annotation.ActionLayout.Position;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.SemanticsOf;
import org.apache.causeway.applib.value.Blob;

import lombok.RequiredArgsConstructor;

import dita.commons.format.FormatUtils;
import dita.commons.sid.SemanticIdentifier;
import dita.commons.sid.SemanticIdentifierSet;
import dita.recall24.reporter.tabular.TabularReporters;
import dita.recall24.reporter.tabular.TabularReporters.Aggregation;
import io.github.causewaystuff.blobstore.applib.BlobStore;

@Action(
        semantics = SemanticsOf.IDEMPOTENT
)
@ActionLayout(
        fieldSetId = "interviewUploads",
        sequence = "2",
        position = Position.PANEL,
        cssClass = "btn-primary",
        cssClassFa = "solid file-export",
        describedAs = "Generates an Interview Report.")
@RequiredArgsConstructor
public class Campaign_generateReport {

    @Inject @Qualifier("survey") private BlobStore surveyBlobStore;

    final Campaign mixee;

    @MemberSupport
    public Blob act(@Parameter final Aggregation aggregation) {
        var interviewSet = Campaigns.interviewSet(mixee, surveyBlobStore);
        var nutMapping = Campaigns.nutMapping(mixee, surveyBlobStore);
        var fcoMapping = Campaigns.fcoMapping(mixee, surveyBlobStore);
        var pocMapping = Campaigns.pocMapping(mixee, surveyBlobStore);
        var foodCompositionRepo = Campaigns.fcdb(mixee, surveyBlobStore);

        final var systemId = "GD-AT20240507"; //TODO refactor to non hardcoded
        var tabularReport = new TabularReporters.TabularReport(interviewSet, systemId,
                nutMapping,
                fcoMapping, SemanticIdentifierSet.ofCollection(List.of(new SemanticIdentifier("Language", "de"))),
                pocMapping, SemanticIdentifierSet.ofCollection(List.of(new SemanticIdentifier("Language", "de"))),
                foodCompositionRepo,
                aggregation);

        var name = String.format("%s_%s_%s_%s",
                mixee.getSurveyCode().toLowerCase(),
                mixee.getCode().toLowerCase(),
                aggregation.name(),
                FormatUtils.isoDate(LocalDate.now()));
        return tabularReport.reportAsBlob(name);
    }

    @MemberSupport
    public Aggregation defaultAggregation() {
        return Aggregation.NONE;
    }

}
