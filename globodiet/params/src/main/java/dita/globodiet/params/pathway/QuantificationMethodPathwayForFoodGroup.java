/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.params.pathway;

import dita.globodiet.params.food_descript.FoodDescriptor;
import dita.globodiet.params.food_list.FoodGroup;
import dita.globodiet.params.food_list.FoodSubgroup;
import dita.globodiet.params.quantif.Photo;
import io.github.causewaystuff.companion.applib.services.lookup.Cloneable;
import io.github.causewaystuff.companion.applib.services.lookup.HasSecondaryKey;
import io.github.causewaystuff.companion.applib.services.lookup.ISecondaryKey;
import io.github.causewaystuff.companion.applib.services.search.SearchService;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import javax.annotation.processing.Generated;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.Extension;
import javax.jdo.annotations.NotPersistent;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Unique;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.Navigable;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.PrecedingParamsPolicy;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Snapshot;
import org.apache.causeway.applib.annotation.Where;
import org.apache.causeway.applib.services.repository.RepositoryService;

/**
 * Quantification method pathway for food group/subgroup.
 * Optionally can be superseded by @{table QM_FOODS}.
 */
@Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity")
@Named("dita.globodiet.params.pathway.QuantificationMethodPathwayForFoodGroup")
@DomainObject
@DomainObjectLayout(
        describedAs = "Quantification method pathway for food group/subgroup.\n"
                        + "Optionally can be superseded by @{table QM_FOODS}.",
        cssClassFa = "solid person-walking-arrow-right .food-color,\n"
                        + "solid scale-balanced .food-color .ov-size-60 .ov-right-50 .ov-bottom-85,\n"
)
@PersistenceCapable(
        table = "QM_GROUP"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
@Unique(
        name = "SEC_KEY_UNQ_QuantificationMethodPathwayForFoodGroup",
        members = {"foodGroupCode", "foodSubgroupCode", "foodSubSubgroupCode", "physicalStateFacetDescriptorLookupKey", "rawOrCookedAsConsumed", "quantificationMethod", "photoOrShapeCode"}
)
public class QuantificationMethodPathwayForFoodGroup implements Cloneable<QuantificationMethodPathwayForFoodGroup>, HasSecondaryKey<QuantificationMethodPathwayForFoodGroup> {
    @Inject
    RepositoryService repositoryService;

    @Inject
    SearchService searchService;

    /**
     * Food group code
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "1",
            describedAs = "Food group code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "GROUP",
            allowsNull = "false",
            length = 2
    )
    @Getter
    @Setter
    private String foodGroupCode;

    /**
     * Food subgroup code
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "2",
            describedAs = "Food subgroup code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "SUBGROUP1",
            allowsNull = "false",
            length = 2
    )
    @Getter
    @Setter
    private String foodSubgroupCode;

    /**
     * Food sub-subgroup code
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "3",
            describedAs = "Food sub-subgroup code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "SUBGROUP2",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String foodSubSubgroupCode;

    /**
     * Descriptor code of Physical state facet descface.facet_code+descface.descr_code (e.g. 0205)
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "4",
            describedAs = "Descriptor code of Physical state facet descface.facet_code+descface.descr_code (e.g. 0205)",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "PHYS_STATE",
            allowsNull = "true",
            length = 4
    )
    @Getter
    @Setter
    private String physicalStateFacetDescriptorLookupKey;

    /**
     * 1=raw,
     * 2=cooked (as Consumed)
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "5",
            describedAs = "1=raw,\n"
                            + "2=cooked (as Consumed)",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "RAW_COOKED",
            allowsNull = "true",
            length = 1
    )
    @Getter
    @Setter
    @Extension(
            vendorName = "datanucleus",
            key = "enum-check-constraint",
            value = "true"
    )
    @Extension(
            vendorName = "datanucleus",
            key = "enum-value-getter",
            value = "getMatchOn"
    )
    private RawOrCookedAsConsumed rawOrCookedAsConsumed;

    /**
     * Quantification method code:
     * 'P' for photo,
     * 'H' for HHM,
     * 'U' for stdu,
     * 'S' for standard portion,
     * 'A' for shape
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "6",
            describedAs = "Quantification method code:\n"
                            + "'P' for photo,\n"
                            + "'H' for HHM,\n"
                            + "'U' for stdu,\n"
                            + "'S' for standard portion,\n"
                            + "'A' for shape",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "METHOD",
            allowsNull = "false",
            length = 1
    )
    @Getter
    @Setter
    @Extension(
            vendorName = "datanucleus",
            key = "enum-check-constraint",
            value = "true"
    )
    @Extension(
            vendorName = "datanucleus",
            key = "enum-value-getter",
            value = "getMatchOn"
    )
    private QuantificationMethod quantificationMethod;

    /**
     * if method='P' Photo code
     * if method='A' Shape code
     * else empty
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "7",
            describedAs = "if method='P' Photo code\n"
                            + "if method='A' Shape code\n"
                            + "else empty",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "METH_CODE",
            allowsNull = "true",
            length = 4
    )
    @Getter
    @Setter
    private String photoOrShapeCode;

    /**
     * Comment
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "8",
            describedAs = "Comment",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "COMMENT",
            allowsNull = "false",
            length = 200
    )
    @Getter
    @Setter
    private String comment;

    @ObjectSupport
    public String title() {
        return this.toString();
    }

    @Override
    public String toString() {
        return "QuantificationMethodPathwayForFoodGroup(" + "foodGroupCode=" + getFoodGroupCode() + ","
         +"foodSubgroupCode=" + getFoodSubgroupCode() + ","
         +"foodSubSubgroupCode=" + getFoodSubSubgroupCode() + ","
         +"physicalStateFacetDescriptorLookupKey=" + getPhysicalStateFacetDescriptorLookupKey() + ","
         +"rawOrCookedAsConsumed=" + getRawOrCookedAsConsumed() + ","
         +"quantificationMethod=" + getQuantificationMethod() + ","
         +"photoOrShapeCode=" + getPhotoOrShapeCode() + ","
         +"comment=" + getComment() + ")";
    }

    @Programmatic
    @Override
    public QuantificationMethodPathwayForFoodGroup copy() {
        var copy = repositoryService.detachedEntity(new QuantificationMethodPathwayForFoodGroup());
        copy.setFoodGroupCode(getFoodGroupCode());
        copy.setFoodSubgroupCode(getFoodSubgroupCode());
        copy.setFoodSubSubgroupCode(getFoodSubSubgroupCode());
        copy.setPhysicalStateFacetDescriptorLookupKey(getPhysicalStateFacetDescriptorLookupKey());
        copy.setRawOrCookedAsConsumed(getRawOrCookedAsConsumed());
        copy.setQuantificationMethod(getQuantificationMethod());
        copy.setPhotoOrShapeCode(getPhotoOrShapeCode());
        copy.setComment(getComment());
        return copy;
    }

    @Property(
            snapshot = Snapshot.EXCLUDED
    )
    @PropertyLayout(
            hidden = Where.EVERYWHERE,
            navigable = Navigable.PARENT
    )
    @NotPersistent
    public QuantificationMethodPathwayForFoodGroup.Manager getNavigableParent() {
        return new QuantificationMethodPathwayForFoodGroup.Manager(searchService, "");
    }

    @Programmatic
    public SecondaryKey secondaryKey() {
        return new SecondaryKey(getFoodGroupCode(), 
        getFoodSubgroupCode(), 
        getFoodSubSubgroupCode(), 
        getPhysicalStateFacetDescriptorLookupKey(), 
        getRawOrCookedAsConsumed()!=null ? getRawOrCookedAsConsumed().matchOn : null, 
        getQuantificationMethod()!=null ? getQuantificationMethod().matchOn : null, 
        getPhotoOrShapeCode());
    }

    @RequiredArgsConstructor
    public enum RawOrCookedAsConsumed {
        /**
         * no description
         */
        RAW("1", "raw"),

        /**
         *  as Consumed
         */
        COOKED("2", "cooked");

        @Getter
        private final String matchOn;

        @Getter
        @Accessors(
                fluent = true
        )
        private final String title;
    }

    @RequiredArgsConstructor
    public enum QuantificationMethod {
        /**
         * no description
         */
        PHOTO("P", "Photo"),

        /**
         * no description
         */
        HOUSEHOLD_MEASURE("H", "Household Measure"),

        /**
         * no description
         */
        STANDARD_UNIT("U", "Standard Unit"),

        /**
         * no description
         */
        STANDARD_PORTION("S", "Standard Portion"),

        /**
         * no description
         */
        SHAPE("A", "Shape");

        @Getter
        private final String matchOn;

        @Getter
        @Accessors(
                fluent = true
        )
        private final String title;
    }

    /**
     * Manager Viewmodel for @{link QuantificationMethodPathwayForFoodGroup}
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Manager")
    @Named("dita.globodiet.params.pathway.QuantificationMethodPathwayForFoodGroup.Manager")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            describedAs = "Quantification method pathway for food group/subgroup.\n"
                            + "Optionally can be superseded by @{table QM_FOODS}.",
            cssClassFa = "solid person-walking-arrow-right .food-color,\n"
                            + "solid scale-balanced .food-color .ov-size-60 .ov-right-50 .ov-bottom-85,\n"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Quantification Method Pathway For Food Group";
        }

        @Collection
        public final List<QuantificationMethodPathwayForFoodGroup> getListOfQuantificationMethodPathwayForFoodGroup(
                ) {
            return searchService.search(QuantificationMethodPathwayForFoodGroup.class, QuantificationMethodPathwayForFoodGroup::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }

    /**
     * Parameter model for @{link QuantificationMethodPathwayForFoodGroup}
     * @param foodGroup Food group code
     * @param foodSubgroup Food subgroup code
     * @param foodSubSubgroup Food sub-subgroup code
     * @param physicalStateFacetDescriptor Descriptor code of Physical state facet descface.facet_code+descface.descr_code (e.g. 0205)
     * @param rawOrCookedAsConsumed 1=raw,
     * 2=cooked (as Consumed)
     * @param quantificationMethod Quantification method code:
     * 'P' for photo,
     * 'H' for HHM,
     * 'U' for stdu,
     * 'S' for standard portion,
     * 'A' for shape
     * @param photoOrShape if method='P' Photo code
     * if method='A' Shape code
     * else empty
     * @param comment Comment
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Params")
    public final record Params(
            @Parameter(
                    precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.MANDATORY
            )
            @ParameterLayout(
                    describedAs = "Food group code"
            )
            FoodGroup foodGroup,
            @Parameter(
                    precedingParamsPolicy = PrecedingParamsPolicy.RESET,
                    optionality = Optionality.MANDATORY
            )
            @ParameterLayout(
                    describedAs = "Food subgroup code"
            )
            FoodSubgroup foodSubgroup,
            @Parameter(
                    precedingParamsPolicy = PrecedingParamsPolicy.RESET,
                    optionality = Optionality.OPTIONAL
            )
            @ParameterLayout(
                    describedAs = "Food sub-subgroup code"
            )
            FoodSubgroup foodSubSubgroup,
            @Parameter(
                    precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.OPTIONAL
            )
            @ParameterLayout(
                    describedAs = "Descriptor code of Physical state facet descface.facet_code+descface.descr_code (e.g. 0205)"
            )
            FoodDescriptor physicalStateFacetDescriptor,
            @Parameter(
                    precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.OPTIONAL
            )
            @ParameterLayout(
                    describedAs = "1=raw,\n"
                                    + "2=cooked (as Consumed)"
            )
            RawOrCookedAsConsumed rawOrCookedAsConsumed,
            @Parameter(
                    precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.MANDATORY
            )
            @ParameterLayout(
                    describedAs = "Quantification method code:\n"
                                    + "'P' for photo,\n"
                                    + "'H' for HHM,\n"
                                    + "'U' for stdu,\n"
                                    + "'S' for standard portion,\n"
                                    + "'A' for shape"
            )
            QuantificationMethod quantificationMethod,
            @Parameter(
                    precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.OPTIONAL
            )
            @ParameterLayout(
                    describedAs = "if method='P' Photo code\n"
                                    + "if method='A' Shape code\n"
                                    + "else empty"
            )
            Photo photoOrShape,
            @Parameter(
                    precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.MANDATORY
            )
            @ParameterLayout(
                    describedAs = "Comment"
            )
            String comment) {
    }

    /**
     * SecondaryKey for @{link QuantificationMethodPathwayForFoodGroup}
     * @param foodGroupCode Food group code
     * @param foodSubgroupCode Food subgroup code
     * @param foodSubSubgroupCode Food sub-subgroup code
     * @param physicalStateFacetDescriptorLookupKey Descriptor code of Physical state facet descface.facet_code+descface.descr_code (e.g. 0205)
     * @param rawOrCookedAsConsumed 1=raw,
     * 2=cooked (as Consumed)
     * @param quantificationMethod Quantification method code:
     * 'P' for photo,
     * 'H' for HHM,
     * 'U' for stdu,
     * 'S' for standard portion,
     * 'A' for shape
     * @param photoOrShapeCode if method='P' Photo code
     * if method='A' Shape code
     * else empty
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_SecondaryKey")
    public final record SecondaryKey(
            String foodGroupCode,
            String foodSubgroupCode,
            String foodSubSubgroupCode,
            String physicalStateFacetDescriptorLookupKey,
            String rawOrCookedAsConsumed,
            String quantificationMethod,
            String photoOrShapeCode) implements ISecondaryKey<QuantificationMethodPathwayForFoodGroup> {
        @Override
        public Class<QuantificationMethodPathwayForFoodGroup> correspondingClass() {
            return QuantificationMethodPathwayForFoodGroup.class;
        }

        @Override
        public final Unresolvable unresolvable() {
            return new Unresolvable(String.format("UNRESOLVABLE %s%s",
                correspondingClass().getSimpleName(),
                this.toString().substring(12)));
        }
    }

    /**
     * Placeholder @{link ViewModel} for @{link QuantificationMethodPathwayForFoodGroup} in case of an unresolvable secondary key.
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Unresolvable")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            describedAs = "Unresolvable QuantificationMethodPathwayForFoodGroup",
            cssClassFa = "skull .unresolvable-color"
    )
    @Named("dita.globodiet.params.pathway.QuantificationMethodPathwayForFoodGroup.Unresolvable")
    @RequiredArgsConstructor
    public static final class Unresolvable extends QuantificationMethodPathwayForFoodGroup implements ViewModel {
        @Getter(
                onMethod_ = {@Override}
        )
        @Accessors(
                fluent = true
        )
        private final String viewModelMemento;

        @Override
        public String title() {
            return viewModelMemento;
        }
    }
}
