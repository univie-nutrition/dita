/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.params.setting;

import io.github.causewaystuff.companion.applib.jpa.EnumConverter;
import io.github.causewaystuff.companion.applib.jpa.EnumWithCode;
import io.github.causewaystuff.companion.applib.jpa.Persistable;
import io.github.causewaystuff.companion.applib.services.lookup.Cloneable;
import io.github.causewaystuff.companion.applib.services.lookup.HasSecondaryKey;
import io.github.causewaystuff.companion.applib.services.lookup.ISecondaryKey;
import io.github.causewaystuff.companion.applib.services.search.SearchService;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Embeddable;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.persistence.UniqueConstraint;
import java.lang.Class;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.Navigable;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.PrecedingParamsPolicy;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Snapshot;
import org.apache.causeway.applib.annotation.Where;
import org.apache.causeway.applib.services.repository.RepositoryService;

/**
 * Food Consumption Occasion
 */
@Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity")
@Named("dita.globodiet.params.setting.FoodConsumptionOccasion")
@DomainObject
@DomainObjectLayout(
        describedAs = "Food Consumption Occasion",
        cssClassFa = "solid user-clock"
)
@Entity
@Table(
        name = "FCO",
        uniqueConstraints = @UniqueConstraint(
                name = "SEC_KEY_UNQ_FoodConsumptionOccasion",
                columnNames = "`FCM_CODE`"
        )
)
public class FoodConsumptionOccasion implements Persistable, Cloneable<FoodConsumptionOccasion>, HasSecondaryKey<FoodConsumptionOccasion> {
    @Inject
    @Transient
    RepositoryService repositoryService;

    @Inject
    @Transient
    SearchService searchService;

    @Id
    @GeneratedValue(
            strategy = GenerationType.IDENTITY
    )
    private long id;

    /**
     * Food Consumption Occasion code
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "1",
            describedAs = "Food Consumption Occasion code"
    )
    @Column(
            name = "\"FCM_CODE\"",
            nullable = false,
            length = 2
    )
    @Getter
    @Setter
    private String code;

    /**
     * FCO long label (text displayed on screen)
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "2",
            describedAs = "FCO long label (text displayed on screen)"
    )
    @Column(
            name = "\"FCM_NAME\"",
            nullable = false,
            length = 100
    )
    @Getter
    @Setter
    private String textDisplayedOnScreen;

    /**
     * FCO type: if =1 the FCO can be selected several times (e.g. During morning)
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "3",
            describedAs = "FCO type: if =1 the FCO can be selected several times (e.g. During morning)"
    )
    @Column(
            name = "\"FCM_MODE\"",
            nullable = false,
            length = 1
    )
    @Getter
    @Setter
    private String mode;

    /**
     * FCO short label to identify easily the FCO
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "4",
            describedAs = "FCO short label to identify easily the FCO"
    )
    @Column(
            name = "\"FCM_SNAME\"",
            nullable = false,
            length = 50
    )
    @Getter
    @Setter
    private String shortLabelToIdentifyEasily;

    /**
     * 0=non main FCO
     * 1=main FCO (to be displayed in nutrient check screen)
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "5",
            describedAs = "0=non main FCO\n"
                    + "1=main FCO (to be displayed in nutrient check screen)"
    )
    @Column(
            name = "\"FCM_PRINCIPAL\"",
            nullable = false
    )
    @Getter
    @Setter
    @Convert(
            converter = DisplayInNutrientCheckScreenQ.Converter.class
    )
    private DisplayInNutrientCheckScreenQ displayInNutrientCheckScreenQ;

    @ObjectSupport
    public String title() {
        return String.format("%s (code=%s)", textDisplayedOnScreen, code);
    }

    @Override
    public String toString() {
        return "FoodConsumptionOccasion(" + "code=" + getCode() + ","
         +"textDisplayedOnScreen=" + getTextDisplayedOnScreen() + ","
         +"mode=" + getMode() + ","
         +"shortLabelToIdentifyEasily=" + getShortLabelToIdentifyEasily() + ","
         +"displayInNutrientCheckScreenQ=" + getDisplayInNutrientCheckScreenQ() + ")";
    }

    @Programmatic
    @Override
    public FoodConsumptionOccasion copy() {
        var copy = repositoryService.detachedEntity(new FoodConsumptionOccasion());
        copy.setCode(getCode());
        copy.setTextDisplayedOnScreen(getTextDisplayedOnScreen());
        copy.setMode(getMode());
        copy.setShortLabelToIdentifyEasily(getShortLabelToIdentifyEasily());
        copy.setDisplayInNutrientCheckScreenQ(getDisplayInNutrientCheckScreenQ());
        return copy;
    }

    @Property(
            snapshot = Snapshot.EXCLUDED
    )
    @PropertyLayout(
            hidden = Where.EVERYWHERE,
            navigable = Navigable.PARENT
    )
    @Transient
    public FoodConsumptionOccasion.Manager getNavigableParent() {
        return new FoodConsumptionOccasion.Manager(searchService, "");
    }

    @Programmatic
    public SecondaryKey secondaryKey() {
        return new SecondaryKey(getCode());
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum DisplayInNutrientCheckScreenQ implements EnumWithCode<Integer> {

        /**
         * non main FCO
         */
        SECONDARY(0, "secondary"),
        /**
         * main FCO (to be displayed in nutrient check screen)
         */
        PRIMARY(1, "primary");

        private final Integer code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<DisplayInNutrientCheckScreenQ, Integer> {
            @Override
            public DisplayInNutrientCheckScreenQ[] values() {
                return DisplayInNutrientCheckScreenQ.values();
            }
        }
    }

    /**
     * Manager Viewmodel for @{link FoodConsumptionOccasion}
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Manager")
    @Named("dita.globodiet.params.setting.FoodConsumptionOccasion.Manager")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            describedAs = "Food Consumption Occasion",
            cssClassFa = "solid user-clock"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Food Consumption Occasion";
        }

        @Collection
        public final List<FoodConsumptionOccasion> getListOfFoodConsumptionOccasion() {
            return searchService.search(FoodConsumptionOccasion.class, FoodConsumptionOccasion::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }

    /**
     * Parameter model for @{link FoodConsumptionOccasion}
     *
     * @param code Food Consumption Occasion code
     * @param textDisplayedOnScreen FCO long label (text displayed on screen)
     * @param mode FCO type: if =1 the FCO can be selected several times (e.g. During morning)
     * @param shortLabelToIdentifyEasily FCO short label to identify easily the FCO
     * @param displayInNutrientCheckScreenQ 0=non main FCO
     * 1=main FCO (to be displayed in nutrient check screen)
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Params")
    public final record Params(
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Food Consumption Occasion code") String code,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "FCO long label (text displayed on screen)") String textDisplayedOnScreen,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "FCO type: if =1 the FCO can be selected several times (e.g. During morning)") String mode,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "FCO short label to identify easily the FCO") String shortLabelToIdentifyEasily,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "0=non main FCO\n"
                            + "1=main FCO (to be displayed in nutrient check screen)") DisplayInNutrientCheckScreenQ displayInNutrientCheckScreenQ
    ) {
    }

    /**
     * SecondaryKey for @{link FoodConsumptionOccasion}
     *
     * @param code Food Consumption Occasion code
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_SecondaryKey")
    public final record SecondaryKey(
            String code
    ) implements ISecondaryKey<FoodConsumptionOccasion> {
        @Override
        public Class<FoodConsumptionOccasion> correspondingClass() {
            return FoodConsumptionOccasion.class;
        }

        @Override
        public final Unresolvable unresolvable() {
            return new Unresolvable(String.format("UNRESOLVABLE %s%s",
                correspondingClass().getSimpleName(),
                this.toString().substring(12)));
        }
    }

    /**
     * Placeholder @{link ViewModel} for @{link FoodConsumptionOccasion} in case of an unresolvable secondary key.
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Unresolvable")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            named = "Unresolvable FoodConsumptionOccasion",
            describedAs = "Unresolvable FoodConsumptionOccasion",
            cssClassFa = "skull .unresolvable-color"
    )
    @Named("dita.globodiet.params.setting.FoodConsumptionOccasion.Unresolvable")
    @Embeddable
    @RequiredArgsConstructor
    public static final class Unresolvable extends FoodConsumptionOccasion implements ViewModel {
        @Getter(
                onMethod_ = {@Override}
        )
        @Accessors(
                fluent = true
        )
        private final String viewModelMemento;

        @Override
        public String title() {
            return viewModelMemento;
        }
    }
}
