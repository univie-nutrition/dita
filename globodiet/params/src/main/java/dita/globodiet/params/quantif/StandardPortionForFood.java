/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.params.quantif;

import io.github.causewaystuff.companion.applib.jpa.EnumConverter;
import io.github.causewaystuff.companion.applib.jpa.EnumWithCode;
import io.github.causewaystuff.companion.applib.jpa.Persistable;
import io.github.causewaystuff.companion.applib.services.lookup.Cloneable;
import io.github.causewaystuff.companion.applib.services.search.SearchService;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.Navigable;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Snapshot;
import org.apache.causeway.applib.annotation.Where;
import org.apache.causeway.applib.services.repository.RepositoryService;

/**
 * standard portions for foods
 */
@Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity")
@Named("dita.globodiet.params.quantif.StandardPortionForFood")
@DomainObject
@DomainObjectLayout(
        describedAs = "standard portions for foods",
        cssClassFa = "solid bowl-rice"
)
@Entity
@Table(
        name = "M_STDPOR"
)
public class StandardPortionForFood implements Persistable, Cloneable<StandardPortionForFood> {
    @Inject
    @Transient
    RepositoryService repositoryService;

    @Inject
    @Transient
    SearchService searchService;

    @Id
    @GeneratedValue(
            strategy = GenerationType.IDENTITY
    )
    private long id;

    /**
     * Standard portion quantity
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "1",
            describedAs = "Standard portion quantity"
    )
    @Column(
            name = "\"STDP_QUANT\"",
            nullable = false
    )
    @Getter
    @Setter
    private double quantity;

    /**
     * Food identification number (=FOODMUM)
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "2",
            describedAs = "Food identification number (=FOODMUM)",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "\"ID_NUM\"",
            nullable = false,
            length = 5
    )
    @Getter
    @Setter
    private String foodCode;

    /**
     * 1 = raw,
     * 2 = cooked (as estimated)
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "3",
            describedAs = "1 = raw,\n"
                    + "2 = cooked (as estimated)"
    )
    @Column(
            name = "\"RAW_COOKED\"",
            nullable = false,
            length = 1
    )
    @Getter
    @Setter
    @Convert(
            converter = RawOrCooked.Converter.class
    )
    private RawOrCooked rawOrCooked;

    /**
     * 1 = without un-edible part,
     * 2 = with un-edible (as estimated)
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "4",
            describedAs = "1 = without un-edible part,\n"
                    + "2 = with un-edible (as estimated)"
    )
    @Column(
            name = "\"EDIB\"",
            nullable = false,
            length = 1
    )
    @Getter
    @Setter
    @Convert(
            converter = WithUnediblePartQ.Converter.class
    )
    private WithUnediblePartQ withUnediblePartQ;

    /**
     * Comment attached to the standard portion
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "5",
            describedAs = "Comment attached to the standard portion"
    )
    @Column(
            name = "\"COMMENT\"",
            nullable = false,
            length = 100
    )
    @Getter
    @Setter
    private String comment;

    /**
     * Standard portion code for the same food (0001, 0002, 0003)
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "6",
            describedAs = "Standard portion code for the same food (0001, 0002, 0003)"
    )
    @Column(
            name = "\"PORT_CODE\"",
            nullable = false,
            length = 4
    )
    @Getter
    @Setter
    private String code;

    /**
     * G = in grams, V = in ml (volume)
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "7",
            describedAs = "G = in grams, V = in ml (volume)"
    )
    @Column(
            name = "\"STDP_UNIT\"",
            nullable = false,
            length = 1
    )
    @Getter
    @Setter
    private String unit;

    /**
     * Order to display the standard portion
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "8",
            describedAs = "Order to display the standard portion"
    )
    @Column(
            name = "\"D_ORDER\"",
            nullable = false
    )
    @Getter
    @Setter
    private double displayOrder;

    @ObjectSupport
    public String title() {
        return String.format("%s (foodCode=%s, quantity=%.3f, unit=%s, comment=%s)", code, foodCode, quantity, unit, comment);
    }

    @Override
    public String toString() {
        return "StandardPortionForFood(" + "quantity=" + getQuantity() + ","
         +"foodCode=" + getFoodCode() + ","
         +"rawOrCooked=" + getRawOrCooked() + ","
         +"withUnediblePartQ=" + getWithUnediblePartQ() + ","
         +"comment=" + getComment() + ","
         +"code=" + getCode() + ","
         +"unit=" + getUnit() + ","
         +"displayOrder=" + getDisplayOrder() + ")";
    }

    @Programmatic
    @Override
    public StandardPortionForFood copy() {
        var copy = repositoryService.detachedEntity(new StandardPortionForFood());
        copy.setQuantity(getQuantity());
        copy.setFoodCode(getFoodCode());
        copy.setRawOrCooked(getRawOrCooked());
        copy.setWithUnediblePartQ(getWithUnediblePartQ());
        copy.setComment(getComment());
        copy.setCode(getCode());
        copy.setUnit(getUnit());
        copy.setDisplayOrder(getDisplayOrder());
        return copy;
    }

    @Property(
            snapshot = Snapshot.EXCLUDED
    )
    @PropertyLayout(
            hidden = Where.EVERYWHERE,
            navigable = Navigable.PARENT
    )
    @Transient
    public StandardPortionForFood.Manager getNavigableParent() {
        return new StandardPortionForFood.Manager(searchService, "");
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum RawOrCooked implements EnumWithCode<String> {

        /**
         * no description
         */
        RAW("1", "raw"),
        /**
         *  as estimated
         */
        COOKED("2", "cooked");

        private final String code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<RawOrCooked, String> {
            @Override
            public RawOrCooked[] values() {
                return RawOrCooked.values();
            }
        }
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum WithUnediblePartQ implements EnumWithCode<String> {

        /**
         * without un-edible part
         */
        UN_EDIBLE_EXCLUDED("1", "un-edible excluded"),
        /**
         * with un-edible (as estimated)
         */
        UN_EDIBLE_INCLUDED("2", "un-edible included");

        private final String code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<WithUnediblePartQ, String> {
            @Override
            public WithUnediblePartQ[] values() {
                return WithUnediblePartQ.values();
            }
        }
    }

    /**
     * Manager Viewmodel for @{link StandardPortionForFood}
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Manager")
    @Named("dita.globodiet.params.quantif.StandardPortionForFood.Manager")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            describedAs = "standard portions for foods",
            cssClassFa = "solid bowl-rice"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Standard Portion For Food";
        }

        @Collection
        public final List<StandardPortionForFood> getListOfStandardPortionForFood() {
            return searchService.search(StandardPortionForFood.class, StandardPortionForFood::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }
}
