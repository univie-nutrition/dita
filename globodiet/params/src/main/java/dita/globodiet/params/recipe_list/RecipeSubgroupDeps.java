/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.params.recipe_list;

import dita.globodiet.params.nutrient.NutrientForFoodOrGroup;
import dita.globodiet.params.nutrient.NutrientForFoodOrGroup_foodOrRecipeSubgroup;
import dita.globodiet.params.pathway.FacetDescriptorPathwayForRecipeGroup;
import dita.globodiet.params.pathway.FacetDescriptorPathwayForRecipeGroup_recipeSubgroup;
import dita.globodiet.params.pathway.ProbingQuestionPathwayForRecipe;
import dita.globodiet.params.pathway.ProbingQuestionPathwayForRecipe_recipeSubgroup;
import dita.globodiet.params.quantif.MaximumValueForRecipeOrGroup;
import dita.globodiet.params.quantif.MaximumValueForRecipeOrGroup_recipeSubgroup;
import dita.globodiet.params.quantif.ThicknessForShape;
import dita.globodiet.params.quantif.ThicknessForShape_recipeGrouping;
import dita.globodiet.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe;
import dita.globodiet.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeSubgroup;
import dita.globodiet.params.recipe_description.RecipeBrand;
import dita.globodiet.params.recipe_description.RecipeBrand_recipeSubgroup;
import dita.globodiet.params.recipe_description.RecipeFacetRule;
import dita.globodiet.params.recipe_description.RecipeFacetRule_recipeSubgroup;
import dita.globodiet.params.setting.GroupSubstitution;
import dita.globodiet.params.setting.GroupSubstitution_applyToRecipeGroups;
import jakarta.inject.Inject;
import java.lang.Class;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.CollectionLayout;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.commons.collections.Can;
import io.github.causewaystuff.companion.applib.decorate.CollectionTitleDecorator;
import io.github.causewaystuff.companion.applib.services.lookup.DependantLookupService;
import org.springframework.context.annotation.Configuration;

@Generated("io.github.causewaystuff.companion.codegen.domgen._GenDependants")
@Configuration
public class RecipeSubgroupDeps {
    public static Can<Class<?>> mixinClasses() {
        return Can.of(RecipeSubgroup_dependentNutrientForFoodOrGroupMappedByFoodOrRecipeSubgroup.class,
        RecipeSubgroup_dependentFacetDescriptorPathwayForRecipeGroupMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentProbingQuestionPathwayForRecipeMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentMaximumValueForRecipeOrGroupMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentThicknessForShapeMappedByRecipeGrouping.class,
        RecipeSubgroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentRecipeBrandMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentRecipeFacetRuleMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentRecipeMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentRecipeIngredientMappedByFoodOrRecipeSubgroup.class,
        RecipeSubgroup_dependentGroupSubstitutionMappedByApplyToRecipeGroups.class);
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentNutrientForFoodOrGroupMappedByFoodOrRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<NutrientForFoodOrGroup> coll() {
            return dependantLookup.findDependants(
                NutrientForFoodOrGroup.class,
                NutrientForFoodOrGroup_foodOrRecipeSubgroup.class,
                NutrientForFoodOrGroup_foodOrRecipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentFacetDescriptorPathwayForRecipeGroupMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<FacetDescriptorPathwayForRecipeGroup> coll() {
            return dependantLookup.findDependants(
                FacetDescriptorPathwayForRecipeGroup.class,
                FacetDescriptorPathwayForRecipeGroup_recipeSubgroup.class,
                FacetDescriptorPathwayForRecipeGroup_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentProbingQuestionPathwayForRecipeMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<ProbingQuestionPathwayForRecipe> coll() {
            return dependantLookup.findDependants(
                ProbingQuestionPathwayForRecipe.class,
                ProbingQuestionPathwayForRecipe_recipeSubgroup.class,
                ProbingQuestionPathwayForRecipe_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentMaximumValueForRecipeOrGroupMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<MaximumValueForRecipeOrGroup> coll() {
            return dependantLookup.findDependants(
                MaximumValueForRecipeOrGroup.class,
                MaximumValueForRecipeOrGroup_recipeSubgroup.class,
                MaximumValueForRecipeOrGroup_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentThicknessForShapeMappedByRecipeGrouping {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<ThicknessForShape> coll() {
            return dependantLookup.findDependants(
                ThicknessForShape.class,
                ThicknessForShape_recipeGrouping.class,
                ThicknessForShape_recipeGrouping::coll,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeSubgroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentRecipeBrandMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<RecipeBrand> coll() {
            return dependantLookup.findDependants(
                RecipeBrand.class,
                RecipeBrand_recipeSubgroup.class,
                RecipeBrand_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentRecipeFacetRuleMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<RecipeFacetRule> coll() {
            return dependantLookup.findDependants(
                RecipeFacetRule.class,
                RecipeFacetRule_recipeSubgroup.class,
                RecipeFacetRule_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentRecipeMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<Recipe> coll() {
            return dependantLookup.findDependants(
                Recipe.class,
                Recipe_recipeSubgroup.class,
                Recipe_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentRecipeIngredientMappedByFoodOrRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<RecipeIngredient> coll() {
            return dependantLookup.findDependants(
                RecipeIngredient.class,
                RecipeIngredient_foodOrRecipeSubgroup.class,
                RecipeIngredient_foodOrRecipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentGroupSubstitutionMappedByApplyToRecipeGroups {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<GroupSubstitution> coll() {
            return dependantLookup.findDependants(
                GroupSubstitution.class,
                GroupSubstitution_applyToRecipeGroups.class,
                GroupSubstitution_applyToRecipeGroups::coll,
                mixee);
        }
    }
}
