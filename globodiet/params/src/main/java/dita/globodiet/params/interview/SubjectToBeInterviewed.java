/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.params.interview;

import io.github.causewaystuff.companion.applib.jpa.EnumConverter;
import io.github.causewaystuff.companion.applib.jpa.EnumWithCode;
import io.github.causewaystuff.companion.applib.jpa.Persistable;
import io.github.causewaystuff.companion.applib.services.lookup.Cloneable;
import io.github.causewaystuff.companion.applib.services.search.SearchService;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.sql.Timestamp;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.Navigable;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Snapshot;
import org.apache.causeway.applib.annotation.Where;
import org.apache.causeway.applib.services.repository.RepositoryService;

/**
 * Subjects to be interviewed
 */
@Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity")
@Named("dita.globodiet.params.interview.SubjectToBeInterviewed")
@DomainObject
@DomainObjectLayout(
        describedAs = "Subjects to be interviewed",
        cssClassFa = "solid person-circle-question"
)
@Entity
@Table(
        name = "SUBJECTS"
)
public class SubjectToBeInterviewed implements Persistable, Cloneable<SubjectToBeInterviewed> {
    @Inject
    @Transient
    RepositoryService repositoryService;

    @Inject
    @Transient
    SearchService searchService;

    @Id
    @GeneratedValue(
            strategy = GenerationType.IDENTITY
    )
    private long id;

    /**
     * Interview number
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "1",
            describedAs = "Interview number"
    )
    @Column(
            name = "\"INT_NUM\"",
            nullable = true
    )
    @Getter
    @Setter
    private Integer interviewNumber;

    /**
     * Subject birth date
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "2",
            describedAs = "Subject birth date"
    )
    @Column(
            name = "\"PAT_BDATE\"",
            nullable = true
    )
    @Getter
    @Setter
    private Timestamp subjectBirthDate;

    /**
     * Subject code
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "3",
            describedAs = "Subject code"
    )
    @Column(
            name = "\"PAT_CODE\"",
            nullable = true,
            length = 20
    )
    @Getter
    @Setter
    private String subjectCode;

    /**
     * Subject first name
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "4",
            describedAs = "Subject first name"
    )
    @Column(
            name = "\"PAT_FNAME\"",
            nullable = true,
            length = 100
    )
    @Getter
    @Setter
    private String subjectFirstName;

    /**
     * Subject height in cm
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "5",
            describedAs = "Subject height in cm"
    )
    @Column(
            name = "\"PAT_HEIGHT\"",
            nullable = true
    )
    @Getter
    @Setter
    private Double subjectHeightInCm;

    /**
     * Subject name
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "6",
            describedAs = "Subject name"
    )
    @Column(
            name = "\"PAT_NAME\"",
            nullable = true,
            length = 100
    )
    @Getter
    @Setter
    private String subjectName;

    /**
     * Subject sex (1=man, 2=woman)
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "7",
            describedAs = "Subject sex (1=man, 2=woman)"
    )
    @Column(
            name = "\"PAT_SEX\"",
            nullable = true,
            length = 1
    )
    @Getter
    @Setter
    @Convert(
            converter = SubjectSex.Converter.class
    )
    private SubjectSex subjectSex;

    /**
     * Subject weight in kg
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "8",
            describedAs = "Subject weight in kg"
    )
    @Column(
            name = "\"PAT_WEIGHT\"",
            nullable = true
    )
    @Getter
    @Setter
    private Double subjectWeightInKg;

    /**
     * 0=interview to be done,
     * 1=interview done
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "9",
            describedAs = "0=interview to be done,\n"
                    + "1=interview done"
    )
    @Column(
            name = "\"DONE\"",
            nullable = true
    )
    @Getter
    @Setter
    @Convert(
            converter = DoneQ.Converter.class
    )
    private DoneQ doneQ;

    /**
     * Country code
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "10",
            describedAs = "Country code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "\"COUNTRY\"",
            nullable = true,
            length = 3
    )
    @Getter
    @Setter
    private String countryCode;

    /**
     * Center code
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "11",
            describedAs = "Center code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "\"CENTER\"",
            nullable = true,
            length = 3
    )
    @Getter
    @Setter
    private String centerCode;

    /**
     * Interviewer Country code
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "12",
            describedAs = "Interviewer Country code"
    )
    @Column(
            name = "\"INTV_COUNTRY\"",
            nullable = true,
            length = 3
    )
    @Getter
    @Setter
    private String interviewerCountryCode;

    /**
     * Interviewer Center code
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "13",
            describedAs = "Interviewer Center code"
    )
    @Column(
            name = "\"INTV_CENTER\"",
            nullable = true,
            length = 3
    )
    @Getter
    @Setter
    private String interviewerCenterCode;

    /**
     * Interviewer code
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "14",
            describedAs = "Interviewer code"
    )
    @Column(
            name = "\"INTV_CODE\"",
            nullable = true,
            length = 20
    )
    @Getter
    @Setter
    private String interviewerCode;

    /**
     * Recall Date (mm/dd/yy)
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "15",
            describedAs = "Recall Date (mm/dd/yy)"
    )
    @Column(
            name = "\"DATE_REC\"",
            nullable = true
    )
    @Getter
    @Setter
    private Timestamp recallDate;

    @ObjectSupport
    public String title() {
        return String.format("%s, %s (code=%s)", subjectName, subjectFirstName, subjectCode);
    }

    @Override
    public String toString() {
        return "SubjectToBeInterviewed(" + "interviewNumber=" + getInterviewNumber() + ","
         +"subjectBirthDate=" + getSubjectBirthDate() + ","
         +"subjectCode=" + getSubjectCode() + ","
         +"subjectFirstName=" + getSubjectFirstName() + ","
         +"subjectHeightInCm=" + getSubjectHeightInCm() + ","
         +"subjectName=" + getSubjectName() + ","
         +"subjectSex=" + getSubjectSex() + ","
         +"subjectWeightInKg=" + getSubjectWeightInKg() + ","
         +"doneQ=" + getDoneQ() + ","
         +"countryCode=" + getCountryCode() + ","
         +"centerCode=" + getCenterCode() + ","
         +"interviewerCountryCode=" + getInterviewerCountryCode() + ","
         +"interviewerCenterCode=" + getInterviewerCenterCode() + ","
         +"interviewerCode=" + getInterviewerCode() + ","
         +"recallDate=" + getRecallDate() + ")";
    }

    @Programmatic
    @Override
    public SubjectToBeInterviewed copy() {
        var copy = repositoryService.detachedEntity(new SubjectToBeInterviewed());
        copy.setInterviewNumber(getInterviewNumber());
        copy.setSubjectBirthDate(getSubjectBirthDate());
        copy.setSubjectCode(getSubjectCode());
        copy.setSubjectFirstName(getSubjectFirstName());
        copy.setSubjectHeightInCm(getSubjectHeightInCm());
        copy.setSubjectName(getSubjectName());
        copy.setSubjectSex(getSubjectSex());
        copy.setSubjectWeightInKg(getSubjectWeightInKg());
        copy.setDoneQ(getDoneQ());
        copy.setCountryCode(getCountryCode());
        copy.setCenterCode(getCenterCode());
        copy.setInterviewerCountryCode(getInterviewerCountryCode());
        copy.setInterviewerCenterCode(getInterviewerCenterCode());
        copy.setInterviewerCode(getInterviewerCode());
        copy.setRecallDate(getRecallDate());
        return copy;
    }

    @Property(
            snapshot = Snapshot.EXCLUDED
    )
    @PropertyLayout(
            hidden = Where.EVERYWHERE,
            navigable = Navigable.PARENT
    )
    @Transient
    public SubjectToBeInterviewed.Manager getNavigableParent() {
        return new SubjectToBeInterviewed.Manager(searchService, "");
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum SubjectSex implements EnumWithCode<String> {

        /**
         * no description
         */
        MALE("1", "male"),
        /**
         * no description
         */
        FEMALE("2", "female");

        private final String code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<SubjectSex, String> {
            @Override
            public SubjectSex[] values() {
                return SubjectSex.values();
            }
        }
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum DoneQ implements EnumWithCode<Integer> {

        /**
         * no description
         */
        PENDING(0, "pending"),
        /**
         * no description
         */
        DONE(1, "done");

        private final Integer code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<DoneQ, Integer> {
            @Override
            public DoneQ[] values() {
                return DoneQ.values();
            }
        }
    }

    /**
     * Manager Viewmodel for @{link SubjectToBeInterviewed}
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Manager")
    @Named("dita.globodiet.params.interview.SubjectToBeInterviewed.Manager")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            describedAs = "Subjects to be interviewed",
            cssClassFa = "solid person-circle-question"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Subject To Be Interviewed";
        }

        @Collection
        public final List<SubjectToBeInterviewed> getListOfSubjectToBeInterviewed() {
            return searchService.search(SubjectToBeInterviewed.class, SubjectToBeInterviewed::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }
}
