/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.params.recipe_description;

import io.github.causewaystuff.companion.applib.jpa.EnumConverter;
import io.github.causewaystuff.companion.applib.jpa.EnumWithCode;
import io.github.causewaystuff.companion.applib.jpa.Persistable;
import io.github.causewaystuff.companion.applib.services.lookup.Cloneable;
import io.github.causewaystuff.companion.applib.services.lookup.HasSecondaryKey;
import io.github.causewaystuff.companion.applib.services.lookup.ISecondaryKey;
import io.github.causewaystuff.companion.applib.services.search.SearchService;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Embeddable;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.persistence.UniqueConstraint;
import java.lang.Class;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.Navigable;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.PrecedingParamsPolicy;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Snapshot;
import org.apache.causeway.applib.annotation.Where;
import org.apache.causeway.applib.services.repository.RepositoryService;

/**
 * Descriptor per facet
 */
@Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity")
@Named("dita.globodiet.params.recipe_description.RecipeDescriptor")
@DomainObject
@DomainObjectLayout(
        describedAs = "Descriptor per facet",
        cssClassFa = "solid stroopwafel .recipe-color,\n"
                + "solid tag .recipe-color .ov-size-80 .ov-right-55 .ov-bottom-55\n"
)
@Entity
@Table(
        name = "R_DESCFACE",
        uniqueConstraints = @UniqueConstraint(
                columnNames = {
                        "recipeFacetCode",
                        "code"
                }
        )
)
public class RecipeDescriptor implements Persistable, Cloneable<RecipeDescriptor>, HasSecondaryKey<RecipeDescriptor> {
    @Inject
    @Transient
    RepositoryService repositoryService;

    @Inject
    @Transient
    SearchService searchService;

    @Id
    @GeneratedValue(
            strategy = GenerationType.IDENTITY
    )
    private long id;

    /**
     * Facet code for recipes
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "1",
            describedAs = "Facet code for recipes",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "\"RFACET_CODE\"",
            nullable = false,
            length = 2
    )
    @Getter
    @Setter
    private String recipeFacetCode;

    /**
     * Descriptor code for recipes
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "2",
            describedAs = "Descriptor code for recipes"
    )
    @Column(
            name = "\"RDESCR_CODE\"",
            nullable = false,
            length = 2
    )
    @Getter
    @Setter
    private String code;

    /**
     * Descriptor name
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "3",
            describedAs = "Descriptor name"
    )
    @Column(
            name = "\"RDESCR_NAME\"",
            nullable = false,
            length = 100
    )
    @Getter
    @Setter
    private String name;

    /**
     * Only for facet recipe production:
     * 0=not homemade descriptor
     * 1=Homemade descriptor
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "4",
            describedAs = "Only for facet recipe production:\n"
                    + "0=not homemade descriptor\n"
                    + "1=Homemade descriptor"
    )
    @Column(
            name = "\"RDESCR_TYPE\"",
            nullable = false
    )
    @Getter
    @Setter
    @Convert(
            converter = HomemadeOrNot.Converter.class
    )
    private HomemadeOrNot homemadeOrNot;

    /**
     * Only for facet known/unknown: 1=unknown 2=known
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "5",
            describedAs = "Only for facet known/unknown: 1=unknown 2=known"
    )
    @Column(
            name = "\"RDESCR_KNOWN\"",
            nullable = false
    )
    @Getter
    @Setter
    @Convert(
            converter = KnownOrUnknown.Converter.class
    )
    private KnownOrUnknown knownOrUnknown;

    /**
     * Descriptor with type='other' : 1=yes 0=no
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "6",
            describedAs = "Descriptor with type='other' : 1=yes 0=no"
    )
    @Column(
            name = "\"RDESCR_OTHER\"",
            nullable = false
    )
    @Getter
    @Setter
    @Convert(
            converter = YesOrNo.Converter.class
    )
    private YesOrNo yesOrNo;

    /**
     * 0=not single descriptor
     * 1=single descriptor
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "7",
            describedAs = "0=not single descriptor\n"
                    + "1=single descriptor"
    )
    @Column(
            name = "\"RDESCR_SINGLE\"",
            nullable = false
    )
    @Getter
    @Setter
    @Convert(
            converter = SingleOrNot.Converter.class
    )
    private SingleOrNot singleOrNot;

    @ObjectSupport
    public String title() {
        return String.format("%s (code=%s|%s)", name, recipeFacetCode, code);
    }

    @Override
    public String toString() {
        return "RecipeDescriptor(" + "recipeFacetCode=" + getRecipeFacetCode() + ","
         +"code=" + getCode() + ","
         +"name=" + getName() + ","
         +"homemadeOrNot=" + getHomemadeOrNot() + ","
         +"knownOrUnknown=" + getKnownOrUnknown() + ","
         +"yesOrNo=" + getYesOrNo() + ","
         +"singleOrNot=" + getSingleOrNot() + ")";
    }

    @Programmatic
    @Override
    public RecipeDescriptor copy() {
        var copy = repositoryService.detachedEntity(new RecipeDescriptor());
        copy.setRecipeFacetCode(getRecipeFacetCode());
        copy.setCode(getCode());
        copy.setName(getName());
        copy.setHomemadeOrNot(getHomemadeOrNot());
        copy.setKnownOrUnknown(getKnownOrUnknown());
        copy.setYesOrNo(getYesOrNo());
        copy.setSingleOrNot(getSingleOrNot());
        return copy;
    }

    @Property(
            snapshot = Snapshot.EXCLUDED
    )
    @PropertyLayout(
            hidden = Where.EVERYWHERE,
            navigable = Navigable.PARENT
    )
    @Transient
    public RecipeDescriptor.Manager getNavigableParent() {
        return new RecipeDescriptor.Manager(searchService, "");
    }

    @Programmatic
    public SecondaryKey secondaryKey() {
        return new SecondaryKey(getRecipeFacetCode(), 
        getCode());
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum HomemadeOrNot implements EnumWithCode<Integer> {

        /**
         * no description
         */
        NOT_HOMEMADE(0, "not homemade"),
        /**
         * no description
         */
        HOMEMADE(1, "Homemade");

        private final Integer code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<HomemadeOrNot, Integer> {
            @Override
            public HomemadeOrNot[] values() {
                return HomemadeOrNot.values();
            }
        }
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum KnownOrUnknown implements EnumWithCode<Integer> {

        /**
         * Not a facet
         */
        DOES_NOT_APPLY(0, "does not apply"),
        /**
         * no description
         */
        FACET_UNKNOWN(1, "Facet unknown"),
        /**
         * no description
         */
        FACET_KNOWN(2, "Facet known");

        private final Integer code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<KnownOrUnknown, Integer> {
            @Override
            public KnownOrUnknown[] values() {
                return KnownOrUnknown.values();
            }
        }
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum YesOrNo implements EnumWithCode<Integer> {

        /**
         * no description
         */
        NO(0, "no"),
        /**
         * no description
         */
        YES(1, "yes");

        private final Integer code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<YesOrNo, Integer> {
            @Override
            public YesOrNo[] values() {
                return YesOrNo.values();
            }
        }
    }

    @Getter
    @Accessors(
            fluent = true
    )
    @RequiredArgsConstructor
    public enum SingleOrNot implements EnumWithCode<Integer> {

        /**
         * no description
         */
        NOT_SINGLE_DESCRIPTOR(0, "not single descriptor"),
        /**
         * no description
         */
        SINGLE_DESCRIPTOR(1, "single descriptor");

        private final Integer code;

        private final String title;

        @jakarta.persistence.Converter
        public static final class Converter implements EnumConverter<SingleOrNot, Integer> {
            @Override
            public SingleOrNot[] values() {
                return SingleOrNot.values();
            }
        }
    }

    /**
     * Manager Viewmodel for @{link RecipeDescriptor}
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Manager")
    @Named("dita.globodiet.params.recipe_description.RecipeDescriptor.Manager")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            describedAs = "Descriptor per facet",
            cssClassFa = "solid stroopwafel .recipe-color,\n"
                    + "solid tag .recipe-color .ov-size-80 .ov-right-55 .ov-bottom-55\n"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Recipe Descriptor";
        }

        @Collection
        public final List<RecipeDescriptor> getListOfRecipeDescriptor() {
            return searchService.search(RecipeDescriptor.class, RecipeDescriptor::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }

    /**
     * Parameter model for @{link RecipeDescriptor}
     *
     * @param recipeFacet Facet code for recipes
     * @param code Descriptor code for recipes
     * @param name Descriptor name
     * @param homemadeOrNot Only for facet recipe production:
     * 0=not homemade descriptor
     * 1=Homemade descriptor
     * @param knownOrUnknown Only for facet known/unknown: 1=unknown 2=known
     * @param yesOrNo Descriptor with type='other' : 1=yes 0=no
     * @param singleOrNot 0=not single descriptor
     * 1=single descriptor
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Params")
    public final record Params(
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Facet code for recipes") RecipeFacet recipeFacet,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Descriptor code for recipes") String code,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Descriptor name") String name,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Only for facet recipe production:\n"
                            + "0=not homemade descriptor\n"
                            + "1=Homemade descriptor") HomemadeOrNot homemadeOrNot,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Only for facet known/unknown: 1=unknown 2=known") KnownOrUnknown knownOrUnknown,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Descriptor with type='other' : 1=yes 0=no") YesOrNo yesOrNo,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "0=not single descriptor\n"
                            + "1=single descriptor") SingleOrNot singleOrNot
    ) {
    }

    /**
     * SecondaryKey for @{link RecipeDescriptor}
     *
     * @param recipeFacetCode Facet code for recipes
     * @param code Descriptor code for recipes
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_SecondaryKey")
    public final record SecondaryKey(
            String recipeFacetCode,
            String code
    ) implements ISecondaryKey<RecipeDescriptor> {
        @Override
        public Class<RecipeDescriptor> correspondingClass() {
            return RecipeDescriptor.class;
        }

        @Override
        public final Unresolvable unresolvable() {
            return new Unresolvable(String.format("UNRESOLVABLE %s%s",
                correspondingClass().getSimpleName(),
                this.toString().substring(12)));
        }
    }

    /**
     * Placeholder @{link ViewModel} for @{link RecipeDescriptor} in case of an unresolvable secondary key.
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Unresolvable")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            named = "Unresolvable RecipeDescriptor",
            describedAs = "Unresolvable RecipeDescriptor",
            cssClassFa = "skull .unresolvable-color"
    )
    @Named("dita.globodiet.params.recipe_description.RecipeDescriptor.Unresolvable")
    @Embeddable
    @RequiredArgsConstructor
    public static final class Unresolvable extends RecipeDescriptor implements ViewModel {
        @Getter(
                onMethod_ = {@Override}
        )
        @Accessors(
                fluent = true
        )
        private final String viewModelMemento;

        @Override
        public String title() {
            return viewModelMemento;
        }
    }
}
