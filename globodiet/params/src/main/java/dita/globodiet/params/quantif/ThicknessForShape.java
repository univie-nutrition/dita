/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.params.quantif;

import dita.globodiet.params.food_list.FoodSubgroup;
import dita.globodiet.params.recipe_list.RecipeSubgroup;
import io.github.causewaystuff.companion.applib.services.lookup.Cloneable;
import io.github.causewaystuff.companion.applib.services.lookup.HasSecondaryKey;
import io.github.causewaystuff.companion.applib.services.lookup.ISecondaryKey;
import io.github.causewaystuff.companion.applib.services.search.SearchService;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import javax.annotation.processing.Generated;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.NotPersistent;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Unique;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.Navigable;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.PrecedingParamsPolicy;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Snapshot;
import org.apache.causeway.applib.annotation.Where;
import org.apache.causeway.applib.services.repository.RepositoryService;

/**
 * Thickness for shape method
 */
@Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity")
@Named("dita.globodiet.params.quantif.ThicknessForShape")
@DomainObject
@DomainObjectLayout(
        describedAs = "Thickness for shape method",
        cssClassFa = "solid ruler-horizontal"
)
@PersistenceCapable(
        table = "THICKNESS"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
@Unique(
        name = "SEC_KEY_UNQ_ThicknessForShape",
        members = {"code"}
)
public class ThicknessForShape implements Cloneable<ThicknessForShape>, HasSecondaryKey<ThicknessForShape> {
    @Inject
    RepositoryService repositoryService;

    @Inject
    SearchService searchService;

    /**
     * Thickness code (e.g. A,B,C,58_1,58_2...)
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "1",
            describedAs = "Thickness code (e.g. A,B,C,58_1,58_2...)"
    )
    @Column(
            name = "TH_CODE",
            allowsNull = "false",
            length = 10
    )
    @Getter
    @Setter
    private String code;

    /**
     * has no description
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "2",
            describedAs = "has no description"
    )
    @Column(
            name = "TH_THICK",
            allowsNull = "false"
    )
    @Getter
    @Setter
    private double thickness;

    /**
     * Comment attached to the thickness (e.g. small, medium, large…)
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "3",
            describedAs = "Comment attached to the thickness (e.g. small, medium, large…)"
    )
    @Column(
            name = "TH_COMMENT",
            allowsNull = "false",
            length = 100
    )
    @Getter
    @Setter
    private String comment;

    /**
     * For the food items, the food (sub)groups for which this thickness has to be proposed.
     * These (sub)groups have to be separated with a comma (e.g. 0603,1002,1003,1101)
     * When this field is empty, that means that this thickness has always to be proposed
     * whatever the food classification.
     * Multiple subgroup.group and/or subgroup.subgroup1
     * and/or subgroup.subgroup2 comma-separated (e.g. 0603,10,1102)
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "4",
            describedAs = "For the food items, the food (sub)groups for which this thickness has to be proposed.\n"
                    + "These (sub)groups have to be separated with a comma (e.g. 0603,1002,1003,1101)\n"
                    + "When this field is empty, that means that this thickness has always to be proposed\n"
                    + "whatever the food classification.\n"
                    + "Multiple subgroup.group and/or subgroup.subgroup1\n"
                    + "and/or subgroup.subgroup2 comma-separated (e.g. 0603,10,1102)",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "TH_FDCLASS",
            allowsNull = "false",
            length = 100
    )
    @Getter
    @Setter
    private String foodGroupingLookupKey;

    /**
     * For the recipe items, the recipe (sub)groups for which this thickness has to be proposed.
     * These (sub)groups have to be separated with a comma (e.g. 01,02,0301)
     * When this field is empty, that means that this thickness has always to be proposed
     * whatever the recipe classification.
     * Muliple rsubgr.group and/or rsubgr.subgroup comma-separated (e.g. 01,0601)
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "5",
            describedAs = "For the recipe items, the recipe (sub)groups for which this thickness has to be proposed.\n"
                    + "These (sub)groups have to be separated with a comma (e.g. 01,02,0301)\n"
                    + "When this field is empty, that means that this thickness has always to be proposed\n"
                    + "whatever the recipe classification.\n"
                    + "Muliple rsubgr.group and/or rsubgr.subgroup comma-separated (e.g. 01,0601)",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "TH_RCPCLASS",
            allowsNull = "true",
            length = 100
    )
    @Getter
    @Setter
    private String recipeGroupingLookupKey;

    @ObjectSupport
    public String title() {
        return String.format("%s (thickness=%.3f, comment=%s)", code, thickness, comment);
    }

    @Override
    public String toString() {
        return "ThicknessForShape(" + "code=" + getCode() + ","
         +"thickness=" + getThickness() + ","
         +"comment=" + getComment() + ","
         +"foodGroupingLookupKey=" + getFoodGroupingLookupKey() + ","
         +"recipeGroupingLookupKey=" + getRecipeGroupingLookupKey() + ")";
    }

    @Programmatic
    @Override
    public ThicknessForShape copy() {
        var copy = repositoryService.detachedEntity(new ThicknessForShape());
        copy.setCode(getCode());
        copy.setThickness(getThickness());
        copy.setComment(getComment());
        copy.setFoodGroupingLookupKey(getFoodGroupingLookupKey());
        copy.setRecipeGroupingLookupKey(getRecipeGroupingLookupKey());
        return copy;
    }

    @Property(
            snapshot = Snapshot.EXCLUDED
    )
    @PropertyLayout(
            hidden = Where.EVERYWHERE,
            navigable = Navigable.PARENT
    )
    @NotPersistent
    public ThicknessForShape.Manager getNavigableParent() {
        return new ThicknessForShape.Manager(searchService, "");
    }

    @Programmatic
    public SecondaryKey secondaryKey() {
        return new SecondaryKey(getCode());
    }

    /**
     * Manager Viewmodel for @{link ThicknessForShape}
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Manager")
    @Named("dita.globodiet.params.quantif.ThicknessForShape.Manager")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            describedAs = "Thickness for shape method",
            cssClassFa = "solid ruler-horizontal"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Thickness For Shape";
        }

        @Collection
        public final List<ThicknessForShape> getListOfThicknessForShape() {
            return searchService.search(ThicknessForShape.class, ThicknessForShape::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }

    /**
     * Parameter model for @{link ThicknessForShape}
     *
     * @param code Thickness code (e.g. A,B,C,58_1,58_2...)
     * @param thickness has no description
     * @param comment Comment attached to the thickness (e.g. small, medium, large…)
     * @param foodGrouping For the food items, the food (sub)groups for which this thickness has to be proposed.
     * These (sub)groups have to be separated with a comma (e.g. 0603,1002,1003,1101)
     * When this field is empty, that means that this thickness has always to be proposed
     * whatever the food classification.
     * Multiple subgroup.group and/or subgroup.subgroup1
     * and/or subgroup.subgroup2 comma-separated (e.g. 0603,10,1102)
     * @param recipeGrouping For the recipe items, the recipe (sub)groups for which this thickness has to be proposed.
     * These (sub)groups have to be separated with a comma (e.g. 01,02,0301)
     * When this field is empty, that means that this thickness has always to be proposed
     * whatever the recipe classification.
     * Muliple rsubgr.group and/or rsubgr.subgroup comma-separated (e.g. 01,0601)
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Params")
    public final record Params(
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Thickness code (e.g. A,B,C,58_1,58_2...)") String code,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "has no description") double thickness,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Comment attached to the thickness (e.g. small, medium, large…)") String comment,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "For the food items, the food (sub)groups for which this thickness has to be proposed.\n"
                            + "These (sub)groups have to be separated with a comma (e.g. 0603,1002,1003,1101)\n"
                            + "When this field is empty, that means that this thickness has always to be proposed\n"
                            + "whatever the food classification.\n"
                            + "Multiple subgroup.group and/or subgroup.subgroup1\n"
                            + "and/or subgroup.subgroup2 comma-separated (e.g. 0603,10,1102)") FoodSubgroup foodGrouping,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.OPTIONAL) @ParameterLayout(describedAs = "For the recipe items, the recipe (sub)groups for which this thickness has to be proposed.\n"
                            + "These (sub)groups have to be separated with a comma (e.g. 01,02,0301)\n"
                            + "When this field is empty, that means that this thickness has always to be proposed\n"
                            + "whatever the recipe classification.\n"
                            + "Muliple rsubgr.group and/or rsubgr.subgroup comma-separated (e.g. 01,0601)") RecipeSubgroup recipeGrouping
    ) {
    }

    /**
     * SecondaryKey for @{link ThicknessForShape}
     *
     * @param code Thickness code (e.g. A,B,C,58_1,58_2...)
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_SecondaryKey")
    public final record SecondaryKey(
            String code
    ) implements ISecondaryKey<ThicknessForShape> {
        @Override
        public Class<ThicknessForShape> correspondingClass() {
            return ThicknessForShape.class;
        }

        @Override
        public final Unresolvable unresolvable() {
            return new Unresolvable(String.format("UNRESOLVABLE %s%s",
                correspondingClass().getSimpleName(),
                this.toString().substring(12)));
        }
    }

    /**
     * Placeholder @{link ViewModel} for @{link ThicknessForShape} in case of an unresolvable secondary key.
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Unresolvable")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            named = "Unresolvable ThicknessForShape",
            describedAs = "Unresolvable ThicknessForShape",
            cssClassFa = "skull .unresolvable-color"
    )
    @Named("dita.globodiet.params.quantif.ThicknessForShape.Unresolvable")
    @RequiredArgsConstructor
    public static final class Unresolvable extends ThicknessForShape implements ViewModel {
        @Getter(
                onMethod_ = {@Override}
        )
        @Accessors(
                fluent = true
        )
        private final String viewModelMemento;

        @Override
        public String title() {
            return viewModelMemento;
        }
    }
}
