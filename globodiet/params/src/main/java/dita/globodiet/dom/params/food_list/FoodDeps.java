/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.food_list;

import dita.commons.services.lookup.DependantLookupService;
import dita.globodiet.dom.params.food_coefficient.DensityFactorForFood;
import dita.globodiet.dom.params.food_coefficient.DensityFactorForFood_foodOrRecipe;
import dita.globodiet.dom.params.food_coefficient.EdiblePartCoefficientForFood;
import dita.globodiet.dom.params.food_coefficient.EdiblePartCoefficientForFood_food;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_food;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssFat;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood_fat;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood_food;
import dita.globodiet.dom.params.food_coefficient.RawToCookedConversionFactorForFood;
import dita.globodiet.dom.params.food_coefficient.RawToCookedConversionFactorForFood_food;
import dita.globodiet.dom.params.food_descript.ExceptionForSomeFoodToTheFacetDescriptorPathway;
import dita.globodiet.dom.params.food_descript.ExceptionForSomeFoodToTheFacetDescriptorPathway_food;
import dita.globodiet.dom.params.food_descript.ImprobableSequenceOfFacetAndDescriptor;
import dita.globodiet.dom.params.food_descript.ImprobableSequenceOfFacetAndDescriptor_food;
import dita.globodiet.dom.params.food_probing.ProbingQuestionPathwayForFoods;
import dita.globodiet.dom.params.food_probing.ProbingQuestionPathwayForFoods_food;
import dita.globodiet.dom.params.food_quantif.QuantificationMethodsPathwayForFood;
import dita.globodiet.dom.params.food_quantif.QuantificationMethodsPathwayForFood_food;
import dita.globodiet.dom.params.food_quantif.StandardPortionForFood;
import dita.globodiet.dom.params.food_quantif.StandardPortionForFood_food;
import dita.globodiet.dom.params.food_table.ItemDefinition;
import dita.globodiet.dom.params.food_table.ItemDefinition_foodOrRecipe;
import dita.globodiet.dom.params.quantif.StandardUnitForFoodOrRecipe;
import dita.globodiet.dom.params.quantif.StandardUnitForFoodOrRecipe_foodOrRecipe;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssFat;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient;
import dita.globodiet.dom.params.recipe_list.RecipeIngredientQuantification;
import dita.globodiet.dom.params.recipe_list.RecipeIngredientQuantification_ingredientFoodOrRecipe;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient_foodOrRecipe;
import jakarta.inject.Inject;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FoodDeps {
    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentDensityFactorForFoodMappedByFoodOrRecipe {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<DensityFactorForFood> coll() {
            return dependantLookup.findDependants(
                DensityFactorForFood.class,
                DensityFactorForFood_foodOrRecipe.class,
                DensityFactorForFood_foodOrRecipe::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentEdiblePartCoefficientForFoodMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<EdiblePartCoefficientForFood> coll() {
            return dependantLookup.findDependants(
                EdiblePartCoefficientForFood.class,
                EdiblePartCoefficientForFood_food.class,
                EdiblePartCoefficientForFood_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_food.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFssFat {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssFat.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssFat::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentPercentOfFatUseDuringCookingForFoodMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<PercentOfFatUseDuringCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatUseDuringCookingForFood.class,
                PercentOfFatUseDuringCookingForFood_food.class,
                PercentOfFatUseDuringCookingForFood_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentPercentOfFatUseDuringCookingForFoodMappedByFat {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<PercentOfFatUseDuringCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatUseDuringCookingForFood.class,
                PercentOfFatUseDuringCookingForFood_fat.class,
                PercentOfFatUseDuringCookingForFood_fat::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentRawToCookedConversionFactorForFoodMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<RawToCookedConversionFactorForFood> coll() {
            return dependantLookup.findDependants(
                RawToCookedConversionFactorForFood.class,
                RawToCookedConversionFactorForFood_food.class,
                RawToCookedConversionFactorForFood_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentExceptionForSomeFoodToTheFacetDescriptorPathwayMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<ExceptionForSomeFoodToTheFacetDescriptorPathway> coll() {
            return dependantLookup.findDependants(
                ExceptionForSomeFoodToTheFacetDescriptorPathway.class,
                ExceptionForSomeFoodToTheFacetDescriptorPathway_food.class,
                ExceptionForSomeFoodToTheFacetDescriptorPathway_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentImprobableSequenceOfFacetAndDescriptorMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<ImprobableSequenceOfFacetAndDescriptor> coll() {
            return dependantLookup.findDependants(
                ImprobableSequenceOfFacetAndDescriptor.class,
                ImprobableSequenceOfFacetAndDescriptor_food.class,
                ImprobableSequenceOfFacetAndDescriptor_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentComposedRecipeIngredientMappedByFoodOrRecipe {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<ComposedRecipeIngredient> coll() {
            return dependantLookup.findDependants(
                ComposedRecipeIngredient.class,
                ComposedRecipeIngredient_foodOrRecipe.class,
                ComposedRecipeIngredient_foodOrRecipe::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentProbingQuestionPathwayForFoodsMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<ProbingQuestionPathwayForFoods> coll() {
            return dependantLookup.findDependants(
                ProbingQuestionPathwayForFoods.class,
                ProbingQuestionPathwayForFoods_food.class,
                ProbingQuestionPathwayForFoods_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentQuantificationMethodsPathwayForFoodMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<QuantificationMethodsPathwayForFood> coll() {
            return dependantLookup.findDependants(
                QuantificationMethodsPathwayForFood.class,
                QuantificationMethodsPathwayForFood_food.class,
                QuantificationMethodsPathwayForFood_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentStandardPortionForFoodMappedByFood {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<StandardPortionForFood> coll() {
            return dependantLookup.findDependants(
                StandardPortionForFood.class,
                StandardPortionForFood_food.class,
                StandardPortionForFood_food::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentItemDefinitionMappedByFoodOrRecipe {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<ItemDefinition> coll() {
            return dependantLookup.findDependants(
                ItemDefinition.class,
                ItemDefinition_foodOrRecipe.class,
                ItemDefinition_foodOrRecipe::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentStandardUnitForFoodOrRecipeMappedByFoodOrRecipe {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<StandardUnitForFoodOrRecipe> coll() {
            return dependantLookup.findDependants(
                StandardUnitForFoodOrRecipe.class,
                StandardUnitForFoodOrRecipe_foodOrRecipe.class,
                StandardUnitForFoodOrRecipe_foodOrRecipe::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByFssFat {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssFat.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssFat::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentRecipeIngredientMappedByFoodOrRecipe {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<RecipeIngredient> coll() {
            return dependantLookup.findDependants(
                RecipeIngredient.class,
                RecipeIngredient_foodOrRecipe.class,
                RecipeIngredient_foodOrRecipe::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Food_dependentRecipeIngredientQuantificationMappedByIngredientFoodOrRecipe {
        @Inject
        DependantLookupService dependantLookup;

        private final Food mixee;

        @MemberSupport
        public List<RecipeIngredientQuantification> coll() {
            return dependantLookup.findDependants(
                RecipeIngredientQuantification.class,
                RecipeIngredientQuantification_ingredientFoodOrRecipe.class,
                RecipeIngredientQuantification_ingredientFoodOrRecipe::prop,
                mixee);
        }
    }
}
