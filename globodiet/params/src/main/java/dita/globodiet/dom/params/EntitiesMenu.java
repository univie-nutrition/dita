/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params;

import dita.globodiet.dom.params.classification.DietarySupplementClassification;
import dita.globodiet.dom.params.classification.FoodGroup;
import dita.globodiet.dom.params.classification.FoodSubgroup;
import dita.globodiet.dom.params.classification.RecipeGroup;
import dita.globodiet.dom.params.classification.RecipeGroupOrSubgroup;
import dita.globodiet.dom.params.food_coefficient.DensityFactorForFood;
import dita.globodiet.dom.params.food_coefficient.EdiblePartCoefficientForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatLeftInTheDishForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingAttachedToAFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingAttachedToAFood;
import dita.globodiet.dom.params.food_coefficient.RawToCookedConversionFactorsForFoods;
import dita.globodiet.dom.params.food_descript.BrandName;
import dita.globodiet.dom.params.food_descript.CrossReferenceBetweenFoodAndFacet;
import dita.globodiet.dom.params.food_descript.ExceptionForSomeFoodToTheFacetDescriptorPathway;
import dita.globodiet.dom.params.food_descript.ImprobableSequencesOfFacetsAndDescriptors;
import dita.globodiet.dom.params.food_list.ComposedRecipeIngredient;
import dita.globodiet.dom.params.food_list.FoodOrProductOrAlias;
import dita.globodiet.dom.params.food_max.MaximumValueForAFoodOrASubSubGroup;
import dita.globodiet.dom.params.food_probing.ProbingQuestionsPathwaysForFood;
import dita.globodiet.dom.params.food_quantif.FoodStandardUnitsAndPortionsForFoods;
import dita.globodiet.dom.params.food_quantif.QuantificationMethodsPathwayForFoodGroup;
import dita.globodiet.dom.params.food_quantif.QuantificationMethodsPathwayForIndividualFood;
import dita.globodiet.dom.params.food_table.FoodOrRecipeOrAttachment;
import dita.globodiet.dom.params.food_table.NutrientListAndDefinition;
import dita.globodiet.dom.params.food_table.NutrientValuesPerNutrientAndItem;
import dita.globodiet.dom.params.general_info.AverageForAnthropometricValues;
import dita.globodiet.dom.params.general_info.CenterInvolved;
import dita.globodiet.dom.params.general_info.CountryInvolved;
import dita.globodiet.dom.params.general_info.FoodConsumptionOccasion;
import dita.globodiet.dom.params.general_info.Interviewer;
import dita.globodiet.dom.params.general_info.ItemDisplayedForCheckPerFCO;
import dita.globodiet.dom.params.general_info.PlaceOfConsumptionOccasion;
import dita.globodiet.dom.params.general_info.SpecialDayPredefinedAnswer;
import dita.globodiet.dom.params.general_info.SpecialDietPredefinedAnswer;
import dita.globodiet.dom.params.general_info.TranslationInCountryLanguage;
import dita.globodiet.dom.params.probing.ProbingQuestions;
import dita.globodiet.dom.params.quantif.FoodStandardUnitsAndPortionsForFoodsAndRecipes;
import dita.globodiet.dom.params.quantif.HouseholdMeasure;
import dita.globodiet.dom.params.quantif.ListOfThicknessForShapeMethod;
import dita.globodiet.dom.params.quantif.PhotoForQuantity;
import dita.globodiet.dom.params.quantif.Shape;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingAttachedToARecipe;
import dita.globodiet.dom.params.recipe_description.BrandnameListForMixedRecipes;
import dita.globodiet.dom.params.recipe_description.CrossReferenceBetweenRecipeSubGroupAndFacetDescriptor;
import dita.globodiet.dom.params.recipe_description.DescriptorPerFacet;
import dita.globodiet.dom.params.recipe_description.ExceptionsForSomeRecipesToTheFacetsPathway;
import dita.globodiet.dom.params.recipe_description.Facet;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets;
import dita.globodiet.dom.params.recipe_list.MixedRecipeIngredient;
import dita.globodiet.dom.params.recipe_list.MixedRecipeIngredientsQuantification;
import dita.globodiet.dom.params.recipe_list.MixedRecipeNames;
import dita.globodiet.dom.params.recipe_max.MaximumValueForARecipeOrASubGroup;
import dita.globodiet.dom.params.recipe_probing.ProbingQuestionPathwayForRecipes;
import dita.globodiet.dom.params.recipe_quantif.QuantificationMethodPathwayForRecipes;
import dita.globodiet.dom.params.recipe_quantif.QuantificationMethodsPathwayForRecipeGroup;
import dita.globodiet.dom.params.setting.DayOfWeek;
import dita.globodiet.dom.params.setting.DefinitionOfRecipePathway;
import dita.globodiet.dom.params.setting.FacetDescriptorThatCannotBeSubstituted;
import dita.globodiet.dom.params.setting.GroupOrSubgroupThatCanBeSubstitutable;
import dita.globodiet.dom.params.setting.MacroNutrientLimit;
import dita.globodiet.dom.params.setting.Months;
import dita.globodiet.dom.params.setting.NoteStatus;
import dita.globodiet.dom.params.setting.SelectedParameter;
import dita.globodiet.dom.params.setting.SelectedParametersForDataEntry;
import dita.globodiet.dom.params.subject.SubjectToBeInterviewed;
import dita.globodiet.dom.params.supplement_description.DietarySupplementDescriptor;
import dita.globodiet.dom.params.supplement_description.DietarySupplementFacet;
import dita.globodiet.dom.params.supplement_list.DietarySupplementList;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.List;
import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.DomainService;
import org.apache.causeway.applib.services.repository.RepositoryService;

@Named("dita.globodiet.params.EntitiesMenu")
@DomainService(
    nature = org.apache.causeway.applib.annotation.NatureOfService.VIEW
)
public class EntitiesMenu {
  @Inject
  private RepositoryService repositoryService;

  @Action
  public List<AverageForAnthropometricValues> listAllAverageForAnthropometricValues() {
    return repositoryService.allInstances(AverageForAnthropometricValues.class);
  }

  @Action
  public List<BrandName> listAllBrandName() {
    return repositoryService.allInstances(BrandName.class);
  }

  @Action
  public List<CenterInvolved> listAllCenterInvolved() {
    return repositoryService.allInstances(CenterInvolved.class);
  }

  @Action
  public List<ItemDisplayedForCheckPerFCO> listAllItemDisplayedForCheckPerFCO() {
    return repositoryService.allInstances(ItemDisplayedForCheckPerFCO.class);
  }

  @Action
  public List<CountryInvolved> listAllCountryInvolved() {
    return repositoryService.allInstances(CountryInvolved.class);
  }

  @Action
  public List<ComposedRecipeIngredient> listAllComposedRecipeIngredient() {
    return repositoryService.allInstances(ComposedRecipeIngredient.class);
  }

  @Action
  public List<DayOfWeek> listAllDayOfWeek() {
    return repositoryService.allInstances(DayOfWeek.class);
  }

  @Action
  public List<DensityFactorForFood> listAllDensityFactorForFood() {
    return repositoryService.allInstances(DensityFactorForFood.class);
  }

  @Action
  public List<ImprobableSequencesOfFacetsAndDescriptors> listAllImprobableSequencesOfFacetsAndDescriptors(
      ) {
    return repositoryService.allInstances(ImprobableSequencesOfFacetsAndDescriptors.class);
  }

  @Action
  public List<DescriptorPerFacet> listAllDescriptorPerFacet() {
    return repositoryService.allInstances(DescriptorPerFacet.class);
  }

  @Action
  public List<FacetDescriptorThatCannotBeSubstituted> listAllFacetDescriptorThatCannotBeSubstituted(
      ) {
    return repositoryService.allInstances(FacetDescriptorThatCannotBeSubstituted.class);
  }

  @Action
  public List<DietarySupplementClassification> listAllDietarySupplementClassification() {
    return repositoryService.allInstances(DietarySupplementClassification.class);
  }

  @Action
  public List<DietarySupplementDescriptor> listAllDietarySupplementDescriptor() {
    return repositoryService.allInstances(DietarySupplementDescriptor.class);
  }

  @Action
  public List<DietarySupplementFacet> listAllDietarySupplementFacet() {
    return repositoryService.allInstances(DietarySupplementFacet.class);
  }

  @Action
  public List<EdiblePartCoefficientForFood> listAllEdiblePartCoefficientForFood() {
    return repositoryService.allInstances(EdiblePartCoefficientForFood.class);
  }

  @Action
  public List<TranslationInCountryLanguage> listAllTranslationInCountryLanguage() {
    return repositoryService.allInstances(TranslationInCountryLanguage.class);
  }

  @Action
  public List<RuleAppliedToFacets> listAllRuleAppliedToFacets() {
    return repositoryService.allInstances(RuleAppliedToFacets.class);
  }

  @Action
  public List<Facet> listAllFacet() {
    return repositoryService.allInstances(Facet.class);
  }

  @Action
  public List<PercentOfFatLeftInTheDishForFood> listAllPercentOfFatLeftInTheDishForFood() {
    return repositoryService.allInstances(PercentOfFatLeftInTheDishForFood.class);
  }

  @Action
  public List<FoodConsumptionOccasion> listAllFoodConsumptionOccasion() {
    return repositoryService.allInstances(FoodConsumptionOccasion.class);
  }

  @Action
  public List<ExceptionForSomeFoodToTheFacetDescriptorPathway> listAllExceptionForSomeFoodToTheFacetDescriptorPathway(
      ) {
    return repositoryService.allInstances(ExceptionForSomeFoodToTheFacetDescriptorPathway.class);
  }

  @Action
  public List<FoodOrProductOrAlias> listAllFoodOrProductOrAlias() {
    return repositoryService.allInstances(FoodOrProductOrAlias.class);
  }

  @Action
  public List<CrossReferenceBetweenFoodAndFacet> listAllCrossReferenceBetweenFoodAndFacet() {
    return repositoryService.allInstances(CrossReferenceBetweenFoodAndFacet.class);
  }

  @Action
  public List<FoodGroup> listAllFoodGroup() {
    return repositoryService.allInstances(FoodGroup.class);
  }

  @Action
  public List<Interviewer> listAllInterviewer() {
    return repositoryService.allInstances(Interviewer.class);
  }

  @Action
  public List<FoodOrRecipeOrAttachment> listAllFoodOrRecipeOrAttachment() {
    return repositoryService.allInstances(FoodOrRecipeOrAttachment.class);
  }

  @Action
  public List<HouseholdMeasure> listAllHouseholdMeasure() {
    return repositoryService.allInstances(HouseholdMeasure.class);
  }

  @Action
  public List<PhotoForQuantity> listAllPhotoForQuantity() {
    return repositoryService.allInstances(PhotoForQuantity.class);
  }

  @Action
  public List<Shape> listAllShape() {
    return repositoryService.allInstances(Shape.class);
  }

  @Action
  public List<FoodStandardUnitsAndPortionsForFoods> listAllFoodStandardUnitsAndPortionsForFoods() {
    return repositoryService.allInstances(FoodStandardUnitsAndPortionsForFoods.class);
  }

  @Action
  public List<FoodStandardUnitsAndPortionsForFoodsAndRecipes> listAllFoodStandardUnitsAndPortionsForFoodsAndRecipes(
      ) {
    return repositoryService.allInstances(FoodStandardUnitsAndPortionsForFoodsAndRecipes.class);
  }

  @Action
  public List<MaximumValueForARecipeOrASubGroup> listAllMaximumValueForARecipeOrASubGroup() {
    return repositoryService.allInstances(MaximumValueForARecipeOrASubGroup.class);
  }

  @Action
  public List<MaximumValueForAFoodOrASubSubGroup> listAllMaximumValueForAFoodOrASubSubGroup() {
    return repositoryService.allInstances(MaximumValueForAFoodOrASubSubGroup.class);
  }

  @Action
  public List<MixedRecipeIngredient> listAllMixedRecipeIngredient() {
    return repositoryService.allInstances(MixedRecipeIngredient.class);
  }

  @Action
  public List<MixedRecipeIngredientsQuantification> listAllMixedRecipeIngredientsQuantification() {
    return repositoryService.allInstances(MixedRecipeIngredientsQuantification.class);
  }

  @Action
  public List<MixedRecipeNames> listAllMixedRecipeNames() {
    return repositoryService.allInstances(MixedRecipeNames.class);
  }

  @Action
  public List<Months> listAllMonths() {
    return repositoryService.allInstances(Months.class);
  }

  @Action
  public List<NutrientValuesPerNutrientAndItem> listAllNutrientValuesPerNutrientAndItem() {
    return repositoryService.allInstances(NutrientValuesPerNutrientAndItem.class);
  }

  @Action
  public List<MacroNutrientLimit> listAllMacroNutrientLimit() {
    return repositoryService.allInstances(MacroNutrientLimit.class);
  }

  @Action
  public List<NutrientListAndDefinition> listAllNutrientListAndDefinition() {
    return repositoryService.allInstances(NutrientListAndDefinition.class);
  }

  @Action
  public List<SelectedParameter> listAllSelectedParameter() {
    return repositoryService.allInstances(SelectedParameter.class);
  }

  @Action
  public List<SelectedParametersForDataEntry> listAllSelectedParametersForDataEntry() {
    return repositoryService.allInstances(SelectedParametersForDataEntry.class);
  }

  @Action
  public List<PlaceOfConsumptionOccasion> listAllPlaceOfConsumptionOccasion() {
    return repositoryService.allInstances(PlaceOfConsumptionOccasion.class);
  }

  @Action
  public List<ProbingQuestionsPathwaysForFood> listAllProbingQuestionsPathwaysForFood() {
    return repositoryService.allInstances(ProbingQuestionsPathwaysForFood.class);
  }

  @Action
  public List<ProbingQuestions> listAllProbingQuestions() {
    return repositoryService.allInstances(ProbingQuestions.class);
  }

  @Action
  public List<QuantificationMethodsPathwayForIndividualFood> listAllQuantificationMethodsPathwayForIndividualFood(
      ) {
    return repositoryService.allInstances(QuantificationMethodsPathwayForIndividualFood.class);
  }

  @Action
  public List<QuantificationMethodsPathwayForFoodGroup> listAllQuantificationMethodsPathwayForFoodGroup(
      ) {
    return repositoryService.allInstances(QuantificationMethodsPathwayForFoodGroup.class);
  }

  @Action
  public List<QuantificationMethodsPathwayForRecipeGroup> listAllQuantificationMethodsPathwayForRecipeGroup(
      ) {
    return repositoryService.allInstances(QuantificationMethodsPathwayForRecipeGroup.class);
  }

  @Action
  public List<QuantificationMethodPathwayForRecipes> listAllQuantificationMethodPathwayForRecipes(
      ) {
    return repositoryService.allInstances(QuantificationMethodPathwayForRecipes.class);
  }

  @Action
  public List<BrandnameListForMixedRecipes> listAllBrandnameListForMixedRecipes() {
    return repositoryService.allInstances(BrandnameListForMixedRecipes.class);
  }

  @Action
  public List<CrossReferenceBetweenRecipeSubGroupAndFacetDescriptor> listAllCrossReferenceBetweenRecipeSubGroupAndFacetDescriptor(
      ) {
    return repositoryService.allInstances(CrossReferenceBetweenRecipeSubGroupAndFacetDescriptor.class);
  }

  @Action
  public List<ExceptionsForSomeRecipesToTheFacetsPathway> listAllExceptionsForSomeRecipesToTheFacetsPathway(
      ) {
    return repositoryService.allInstances(ExceptionsForSomeRecipesToTheFacetsPathway.class);
  }

  @Action
  public List<RawToCookedConversionFactorsForFoods> listAllRawToCookedConversionFactorsForFoods() {
    return repositoryService.allInstances(RawToCookedConversionFactorsForFoods.class);
  }

  @Action
  public List<DefinitionOfRecipePathway> listAllDefinitionOfRecipePathway() {
    return repositoryService.allInstances(DefinitionOfRecipePathway.class);
  }

  @Action
  public List<RecipeGroup> listAllRecipeGroup() {
    return repositoryService.allInstances(RecipeGroup.class);
  }

  @Action
  public List<ProbingQuestionPathwayForRecipes> listAllProbingQuestionPathwayForRecipes() {
    return repositoryService.allInstances(ProbingQuestionPathwayForRecipes.class);
  }

  @Action
  public List<RecipeGroupOrSubgroup> listAllRecipeGroupOrSubgroup() {
    return repositoryService.allInstances(RecipeGroupOrSubgroup.class);
  }

  @Action
  public List<SpecialDayPredefinedAnswer> listAllSpecialDayPredefinedAnswer() {
    return repositoryService.allInstances(SpecialDayPredefinedAnswer.class);
  }

  @Action
  public List<SpecialDietPredefinedAnswer> listAllSpecialDietPredefinedAnswer() {
    return repositoryService.allInstances(SpecialDietPredefinedAnswer.class);
  }

  @Action
  public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingAttachedToAFood> listAllPercentOfFatOrSauceOrSweetenerAddedAfterCookingAttachedToAFood(
      ) {
    return repositoryService.allInstances(PercentOfFatOrSauceOrSweetenerAddedAfterCookingAttachedToAFood.class);
  }

  @Action
  public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingAttachedToARecipe> listAllPercentOfFatOrSauceOrSweetenerAddedAfterCookingAttachedToARecipe(
      ) {
    return repositoryService.allInstances(PercentOfFatOrSauceOrSweetenerAddedAfterCookingAttachedToARecipe.class);
  }

  @Action
  public List<PercentOfFatUseDuringCookingAttachedToAFood> listAllPercentOfFatUseDuringCookingAttachedToAFood(
      ) {
    return repositoryService.allInstances(PercentOfFatUseDuringCookingAttachedToAFood.class);
  }

  @Action
  public List<NoteStatus> listAllNoteStatus() {
    return repositoryService.allInstances(NoteStatus.class);
  }

  @Action
  public List<FoodSubgroup> listAllFoodSubgroup() {
    return repositoryService.allInstances(FoodSubgroup.class);
  }

  @Action
  public List<SubjectToBeInterviewed> listAllSubjectToBeInterviewed() {
    return repositoryService.allInstances(SubjectToBeInterviewed.class);
  }

  @Action
  public List<GroupOrSubgroupThatCanBeSubstitutable> listAllGroupOrSubgroupThatCanBeSubstitutable(
      ) {
    return repositoryService.allInstances(GroupOrSubgroupThatCanBeSubstitutable.class);
  }

  @Action
  public List<DietarySupplementList> listAllDietarySupplementList() {
    return repositoryService.allInstances(DietarySupplementList.class);
  }

  @Action
  public List<ListOfThicknessForShapeMethod> listAllListOfThicknessForShapeMethod() {
    return repositoryService.allInstances(ListOfThicknessForShapeMethod.class);
  }
}
