/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.recipe_list;

import jakarta.inject.Named;
import java.lang.Integer;
import java.lang.String;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.PersistenceCapable;
import lombok.Getter;
import lombok.Setter;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Where;

/**
 * Mixed recipes: Names, identification number and class.<br>
 * Definition: Recipes where, after preparation,<br>
 * the different ingredients cannot be identified and quantified separately are termed ‘mixed’ recipes.<br>
 * The ingredients of mixed recipes are derived from cook books (for homemade and similar recipes),<br>
 * internet or are based on information received from the industry (for commercial recipes).<br>
 * They are entered as standard recipes with the RECIPE MANAGER and handled at the country level<br>
 * prior to the commencement of the interviews.<br>
 * The mixed recipe database may contain three types of recipes:<br>
 * 1) ‘open recipes’,<br>
 * 2) ‘closed recipes’ and<br>
 * 3) ‘strictly commercial with brand recipes’.<br>
 * For each mixed recipe, information on the expected variation of ingredients<br>
 * within the study population needs to be collected, too.<br>
 * If the variation is found to be great, the recipe should be treated as an open recipe.<br>
 * It is also possible to enter several standard variations of a recipe depending on regions.<br>
 * If no variations are expected, a recipe should be treated as a closed recipe<br>
 * or as a strictly commercial recipe.<br>
 * Furthermore, it has to be decided if each ingredient is fixed or substitutable.<br>
 * When entering the recipe ingredients with RECIPE MANAGER,<br>
 * the ingredients are described and quantified like in the food pathway.
 */
@Named("dita.globodiet.params.recipe_list.Recipe")
@DomainObject
@DomainObjectLayout(
        describedAs = "Mixed recipes: Names, identification number and class.<br>\n"
                        + "Definition: Recipes where, after preparation,<br>\n"
                        + "the different ingredients cannot be identified and quantified separately are termed ‘mixed’ recipes.<br>\n"
                        + "The ingredients of mixed recipes are derived from cook books (for homemade and similar recipes),<br>\n"
                        + "internet or are based on information received from the industry (for commercial recipes).<br>\n"
                        + "They are entered as standard recipes with the RECIPE MANAGER and handled at the country level<br>\n"
                        + "prior to the commencement of the interviews.<br>\n"
                        + "The mixed recipe database may contain three types of recipes:<br>\n"
                        + "1) ‘open recipes’,<br>\n"
                        + "2) ‘closed recipes’ and<br>\n"
                        + "3) ‘strictly commercial with brand recipes’.<br>\n"
                        + "For each mixed recipe, information on the expected variation of ingredients<br>\n"
                        + "within the study population needs to be collected, too.<br>\n"
                        + "If the variation is found to be great, the recipe should be treated as an open recipe.<br>\n"
                        + "It is also possible to enter several standard variations of a recipe depending on regions.<br>\n"
                        + "If no variations are expected, a recipe should be treated as a closed recipe<br>\n"
                        + "or as a strictly commercial recipe.<br>\n"
                        + "Furthermore, it has to be decided if each ingredient is fixed or substitutable.<br>\n"
                        + "When entering the recipe ingredients with RECIPE MANAGER,<br>\n"
                        + "the ingredients are described and quantified like in the food pathway."
)
@PersistenceCapable(
        table = "MIXEDREC"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
public class Recipe {
    /**
     * Recipe ID number
     */
    @Property
    @PropertyLayout(
            sequence = "1",
            describedAs = "Recipe ID number",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "R_IDNUM",
            allowsNull = "true",
            length = 5
    )
    @Getter
    @Setter
    private String recipeCode;

    /**
     * Group code of the recipe classification
     */
    @Property
    @PropertyLayout(
            sequence = "2",
            describedAs = "Group code of the recipe classification",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "R_GROUP",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String recipeGroupCode;

    /**
     * Subgroup code of the recipe classification
     */
    @Property
    @PropertyLayout(
            sequence = "3",
            describedAs = "Subgroup code of the recipe classification",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "R_SUBGROUP",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String recipeSubgroupCode;

    /**
     * Recipe name
     */
    @Property
    @PropertyLayout(
            sequence = "4",
            describedAs = "Recipe name",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "R_NAME",
            allowsNull = "true",
            length = 100
    )
    @Getter
    @Setter
    private String name;

    /**
     * Type of recipe:<br>
     * 1.1=Open – Known<br>
     * 1.2=Open – Unknown<br>
     * 1.3=Open with brand<br>
     * 2.1=Closed<br>
     * 2.2=Closed with brand<br>
     * 3.0=Commercial<br>
     * 4.1=New – Known<br>
     * 4.2=New – Unknown
     */
    @Property
    @PropertyLayout(
            sequence = "5",
            describedAs = "Type of recipe:<br>\n"
                            + "1.1=Open – Known<br>\n"
                            + "1.2=Open – Unknown<br>\n"
                            + "1.3=Open with brand<br>\n"
                            + "2.1=Closed<br>\n"
                            + "2.2=Closed with brand<br>\n"
                            + "3.0=Commercial<br>\n"
                            + "4.1=New – Known<br>\n"
                            + "4.2=New – Unknown",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "R_TYPE",
            allowsNull = "true",
            length = 3
    )
    @Getter
    @Setter
    private String recipeType;

    /**
     * Brand name for commercial recipe
     */
    @Property
    @PropertyLayout(
            sequence = "6",
            describedAs = "Brand name for commercial recipe",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "R_BRAND",
            allowsNull = "true",
            length = 100
    )
    @Getter
    @Setter
    private String brandNameForCommercialRecipe;

    /**
     * SH=Shadow
     */
    @Property
    @PropertyLayout(
            sequence = "7",
            describedAs = "SH=Shadow",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "TYPE",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String shadowQ;

    /**
     * 0=recipe without sub-recipe<br>
     * 1=recipe with sub-recipe
     */
    @Property
    @PropertyLayout(
            sequence = "8",
            describedAs = "0=recipe without sub-recipe<br>\n"
                            + "1=recipe with sub-recipe",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "R_SUB",
            allowsNull = "true"
    )
    @Getter
    @Setter
    private Integer hasSubRecipeQ;

    /**
     * has no description
     */
    @Property
    @PropertyLayout(
            sequence = "9",
            describedAs = "has no description",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "STATUS",
            allowsNull = "true",
            length = 1
    )
    @Getter
    @Setter
    private String status;

    @ObjectSupport
    public String title() {
        return this.toString();
    }
}
