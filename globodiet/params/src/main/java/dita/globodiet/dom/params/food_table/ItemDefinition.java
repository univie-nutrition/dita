/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.food_table;

import dita.commons.services.search.SearchService;
import jakarta.inject.Named;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.Extension;
import javax.jdo.annotations.PersistenceCapable;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Where;

/**
 * Items list and definition
 */
@Named("dita.globodiet.params.food_table.ItemDefinition")
@DomainObject
@DomainObjectLayout(
        describedAs = "Items list and definition",
        cssClassFa = "solid paperclip"
)
@PersistenceCapable(
        table = "ITEMS_DEF"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
public class ItemDefinition {
    /**
     * Sequential number
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "1",
            describedAs = "Sequential number",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "ITEM_SEQ",
            allowsNull = "false"
    )
    @Getter
    @Setter
    private int sequentialNumber;

    /**
     * Type of record:
     * F=food,
     * R=recipe,
     * A2=fat attached,
     * A3=liquid attached
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "2",
            describedAs = "Type of record:\n"
                            + "F=food,\n"
                            + "R=recipe,\n"
                            + "A2=fat attached,\n"
                            + "A3=liquid attached",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "TYPE",
            allowsNull = "false",
            length = 2
    )
    @Getter
    @Setter
    @Extension(
            vendorName = "datanucleus",
            key = "enum-check-constraint",
            value = "true"
    )
    @Extension(
            vendorName = "datanucleus",
            key = "enum-value-getter",
            value = "getMatchOn"
    )
    private TypeOfRecord typeOfRecord;

    /**
     * Food or recipe group
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "3",
            describedAs = "Food or recipe group",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "GROUP",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String foodOrRecipeGroupCode;

    /**
     * Food or recipe sub-group
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "4",
            describedAs = "Food or recipe sub-group",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "SUBGROUP1",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String foodOrRecipeSubgroupCode;

    /**
     * Food sub-sub-group
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "5",
            describedAs = "Food sub-sub-group",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "SUBGROUP2",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String foodSubSubgroupCode;

    /**
     * Food or Recipe code
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            fieldSetId = "foreign",
            sequence = "6",
            describedAs = "Food or Recipe code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "ID_NUM",
            allowsNull = "true",
            length = 5
    )
    @Getter
    @Setter
    private String foodOrRecipeCode;

    /**
     * Facet string
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "7",
            describedAs = "Facet string",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "FACET_STR",
            allowsNull = "true",
            length = 100
    )
    @Getter
    @Setter
    private String facetString;

    /**
     * Brand name
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "8",
            describedAs = "Brand name",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "BRANDNAME",
            allowsNull = "true",
            length = 100
    )
    @Getter
    @Setter
    private String brandName;

    /**
     * Priority order
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "9",
            describedAs = "Priority order",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "PRIORITY",
            allowsNull = "false"
    )
    @Getter
    @Setter
    private int priority;

    /**
     * Attached records: only for the Type=A2 & A3
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "10",
            describedAs = "Attached records: only for the Type=A2 & A3",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "ITEM_SEQ_SEQ",
            allowsNull = "true"
    )
    @Getter
    @Setter
    private Integer attachedRecords;

    /**
     * Comment
     */
    @Property(
            optionality = Optionality.OPTIONAL,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "11",
            describedAs = "Comment",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "COMMENT",
            allowsNull = "true",
            length = 4096
    )
    @Getter
    @Setter
    private String comment;

    @ObjectSupport
    public String title() {
        return String.format("Item %s (sequentialNumber=%d)", typeOfRecord.title(), sequentialNumber);
    }

    @Override
    public String toString() {
        return "ItemDefinition(" + "sequentialNumber=" + getSequentialNumber() + ","
         +"typeOfRecord=" + getTypeOfRecord() + ","
         +"foodOrRecipeGroupCode=" + getFoodOrRecipeGroupCode() + ","
         +"foodOrRecipeSubgroupCode=" + getFoodOrRecipeSubgroupCode() + ","
         +"foodSubSubgroupCode=" + getFoodSubSubgroupCode() + ","
         +"foodOrRecipeCode=" + getFoodOrRecipeCode() + ","
         +"facetString=" + getFacetString() + ","
         +"brandName=" + getBrandName() + ","
         +"priority=" + getPriority() + ","
         +"attachedRecords=" + getAttachedRecords() + ","
         +"comment=" + getComment() + ")";
    }

    @RequiredArgsConstructor
    public enum TypeOfRecord {
        /**
         * no description
         */
        FOOD("F", "Food"),

        /**
         * no description
         */
        RECIPE("R", "Recipe"),

        /**
         * no description
         */
        FAT_ATTACHED("A2", "Fat attached"),

        /**
         * no description
         */
        LIQUID_ATTACHED("A3", "Liquid attached");

        @Getter
        private final String matchOn;

        @Getter
        @Accessors(
                fluent = true
        )
        private final String title;
    }

    /**
     * Manager Viewmodel for @{link ItemDefinition}
     */
    @Named("dita.globodiet.params.food_table.ItemDefinition.Manager")
    @DomainObjectLayout(
            describedAs = "Items list and definition",
            cssClassFa = "solid paperclip"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Item Definition";
        }

        @Collection
        public final List<ItemDefinition> getListOfItemDefinition() {
            return searchService.search(ItemDefinition.class, ItemDefinition::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }
}
