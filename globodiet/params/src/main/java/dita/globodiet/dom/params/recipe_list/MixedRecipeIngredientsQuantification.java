/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.recipe_list;

import jakarta.inject.Named;
import java.lang.Double;
import java.lang.String;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.PersistenceCapable;
import lombok.Getter;
import lombok.Setter;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;

/**
 * Mixed recipes: Ingredients quantification for shape and photo methods
 */
@Named("dita.globodiet.params.recipe_list.MixedRecipeIngredientsQuantification")
@DomainObject
@DomainObjectLayout(
    describedAs = "Mixed recipes: Ingredients quantification for shape and photo methods"
)
@PersistenceCapable(
    table = "MIXEDING_QT"
)
@DatastoreIdentity(
    strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
    column = "id"
)
public class MixedRecipeIngredientsQuantification {
  /**
   * Recipe ID number the ingredient belong to
   */
  @Property
  @PropertyLayout(
      describedAs = "Recipe ID number the ingredient belong to"
  )
  @Column(
      name = "R_IDNUM",
      allowsNull = "true",
      length = 5
  )
  @Getter
  @Setter
  private String recipeIDNumberTheIngredientBelongTo;

  /**
   * Sequential Number within a Mixed Recipe for Ingredient
   */
  @Property
  @PropertyLayout(
      describedAs = "Sequential Number within a Mixed Recipe for Ingredient"
  )
  @Column(
      name = "ING_NUM",
      allowsNull = "true"
  )
  @Getter
  @Setter
  private Double sequentialNumberWithinAMixedRecipeForIngredient;

  /**
   * Ingredient Food or Recipe ID number
   */
  @Property
  @PropertyLayout(
      describedAs = "Ingredient Food or Recipe ID number"
  )
  @Column(
      name = "FOODNUM",
      allowsNull = "true",
      length = 5
  )
  @Getter
  @Setter
  private String ingredientFoodOrRecipeIDNumber;

  /**
   * Order of shape selection (e.g. 1)
   */
  @Property
  @PropertyLayout(
      describedAs = "Order of shape selection (e.g. 1)"
  )
  @Column(
      name = "ORDER",
      allowsNull = "true"
  )
  @Getter
  @Setter
  private Double orderOfShapeSelection;

  /**
   * Shape code (e.g. S001)
   */
  @Property
  @PropertyLayout(
      describedAs = "Shape code (e.g. S001)"
  )
  @Column(
      name = "SH_CODE",
      allowsNull = "true",
      length = 5
  )
  @Getter
  @Setter
  private String shapeCode;

  /**
   * Shape surface in cm2 (e.g. 200cm2). 2 decimals
   */
  @Property
  @PropertyLayout(
      describedAs = "Shape surface in cm2 (e.g. 200cm2). 2 decimals"
  )
  @Column(
      name = "SH_SURFACE",
      allowsNull = "true"
  )
  @Getter
  @Setter
  private Double shapeSurfaceInCm2;

  /**
   * Shape: Thickness code (e.g. A or 58_1)
   */
  @Property
  @PropertyLayout(
      describedAs = "Shape: Thickness code (e.g. A or 58_1)"
  )
  @Column(
      name = "TH_CODE",
      allowsNull = "true",
      length = 10
  )
  @Getter
  @Setter
  private String shapeThicknessCode;

  /**
   * Thickness in mm (e.g. 40mm, 0.05 mm). 5 decimals
   */
  @Property
  @PropertyLayout(
      describedAs = "Thickness in mm (e.g. 40mm, 0.05 mm). 5 decimals"
  )
  @Column(
      name = "TH_THICK",
      allowsNull = "true"
  )
  @Getter
  @Setter
  private Double thicknessInMm;

  /**
   * Photo: Number of the Selected Photo (e.g. 1 or 4)
   */
  @Property
  @PropertyLayout(
      describedAs = "Photo: Number of the Selected Photo (e.g. 1 or 4)"
  )
  @Column(
      name = "PH_CODE",
      allowsNull = "true",
      length = 4
  )
  @Getter
  @Setter
  private String photoNumberOfTheSelectedPhoto;

  /**
   * Photo quantity
   */
  @Property
  @PropertyLayout(
      describedAs = "Photo quantity"
  )
  @Column(
      name = "PH_QTY",
      allowsNull = "true"
  )
  @Getter
  @Setter
  private Double photoQuantity;

  /**
   * Shape & Photo: Fraction or unit (e.g. 3/5 or 1 or 2)
   */
  @Property
  @PropertyLayout(
      describedAs = "Shape & Photo: Fraction or unit (e.g. 3/5 or 1 or 2)"
  )
  @Column(
      name = "FRACT",
      allowsNull = "true",
      length = 5
  )
  @Getter
  @Setter
  private String shapeAndPhotoFractionOrUnit;

  /**
   * Sequential Number for Ingredients within a Sub-Recipe
   */
  @Property
  @PropertyLayout(
      describedAs = "Sequential Number for Ingredients within a Sub-Recipe"
  )
  @Column(
      name = "S_ING_NUM",
      allowsNull = "true"
  )
  @Getter
  @Setter
  private Double sequentialNumberForIngredientsWithinASubRecipe;
}
