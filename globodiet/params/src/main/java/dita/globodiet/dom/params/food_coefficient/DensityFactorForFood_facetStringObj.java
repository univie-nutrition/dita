/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.food_coefficient;

import dita.globodiet.dom.params.food_descript.FacetDescriptor;
import jakarta.inject.Inject;
import java.util.Objects;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.services.repository.RepositoryService;

@Property(
        snapshot = org.apache.causeway.applib.annotation.Snapshot.EXCLUDED
)
@PropertyLayout(
        sequence = "3.1",
        describedAs = "Facet string\n"
                        + "multiple (descface.facet_code + descface.descr_code) comma separated (e.g. 0401,0203,051)"
)
@RequiredArgsConstructor
public class DensityFactorForFood_facetStringObj {
    @Inject
    RepositoryService repositoryService;

    private final DensityFactorForFood mixee;

    @MemberSupport
    public FacetDescriptor prop() {
        return repositoryService
            .uniqueMatch(FacetDescriptor.class,
                foreign->Objects.equals(foreign.getFacetCode(), mixee.getFacetString()))
            .orElse(null);
    }
}
