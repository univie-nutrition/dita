/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.food_descript;

import dita.commons.services.lookup.DependantLookupService;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets_facetWhereTheRuleMustBeAppliedObj;
import dita.globodiet.dom.params.setting.FacetDescriptorThatCannotBeSubstituted;
import dita.globodiet.dom.params.setting.FacetDescriptorThatCannotBeSubstituted_facet;
import jakarta.inject.Inject;
import java.lang.Class;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.commons.collections.Can;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FoodFacetDeps {
    public static Can<Class<?>> mixinClasses() {
        return Can.of(FoodFacet_dependentFacetDescriptorPathwayForFoodMappedByMandatoryInSequenceOfFacets.class,
        FoodFacet_dependentFacetDescriptorPathwayForFoodGroupMappedByFacet.class,
        FoodFacet_dependentFoodDescriptorMappedByFacet.class,
        FoodFacet_dependentImprobableSequenceOfFacetAndDescriptorMappedByFacet.class,
        FoodFacet_dependentRuleAppliedToFacetMappedByFacet.class,
        FoodFacet_dependentRuleAppliedToFacetsMappedByFacetWhereTheRuleMustBeAppliedObj.class,
        FoodFacet_dependentFacetDescriptorThatCannotBeSubstitutedMappedByFacet.class);
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodFacet_dependentFacetDescriptorPathwayForFoodMappedByMandatoryInSequenceOfFacets {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodFacet mixee;

        @MemberSupport
        public List<FacetDescriptorPathwayForFood> coll() {
            return dependantLookup.findDependants(
                FacetDescriptorPathwayForFood.class,
                FacetDescriptorPathwayForFood_mandatoryInSequenceOfFacets.class,
                FacetDescriptorPathwayForFood_mandatoryInSequenceOfFacets::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodFacet_dependentFacetDescriptorPathwayForFoodGroupMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodFacet mixee;

        @MemberSupport
        public List<FacetDescriptorPathwayForFoodGroup> coll() {
            return dependantLookup.findDependants(
                FacetDescriptorPathwayForFoodGroup.class,
                FacetDescriptorPathwayForFoodGroup_facet.class,
                FacetDescriptorPathwayForFoodGroup_facet::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodFacet_dependentFoodDescriptorMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodFacet mixee;

        @MemberSupport
        public List<FoodDescriptor> coll() {
            return dependantLookup.findDependants(
                FoodDescriptor.class,
                FoodDescriptor_facet.class,
                FoodDescriptor_facet::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodFacet_dependentImprobableSequenceOfFacetAndDescriptorMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodFacet mixee;

        @MemberSupport
        public List<ImprobableSequenceOfFacetAndDescriptor> coll() {
            return dependantLookup.findDependants(
                ImprobableSequenceOfFacetAndDescriptor.class,
                ImprobableSequenceOfFacetAndDescriptor_facet.class,
                ImprobableSequenceOfFacetAndDescriptor_facet::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodFacet_dependentRuleAppliedToFacetMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodFacet mixee;

        @MemberSupport
        public List<RuleAppliedToFacet> coll() {
            return dependantLookup.findDependants(
                RuleAppliedToFacet.class,
                RuleAppliedToFacet_facet.class,
                RuleAppliedToFacet_facet::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodFacet_dependentRuleAppliedToFacetsMappedByFacetWhereTheRuleMustBeAppliedObj {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodFacet mixee;

        @MemberSupport
        public List<RuleAppliedToFacets> coll() {
            return dependantLookup.findDependants(
                RuleAppliedToFacets.class,
                RuleAppliedToFacets_facetWhereTheRuleMustBeAppliedObj.class,
                RuleAppliedToFacets_facetWhereTheRuleMustBeAppliedObj::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodFacet_dependentFacetDescriptorThatCannotBeSubstitutedMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodFacet mixee;

        @MemberSupport
        public List<FacetDescriptorThatCannotBeSubstituted> coll() {
            return dependantLookup.findDependants(
                FacetDescriptorThatCannotBeSubstituted.class,
                FacetDescriptorThatCannotBeSubstituted_facet.class,
                FacetDescriptorThatCannotBeSubstituted_facet::prop,
                mixee);
        }
    }
}
