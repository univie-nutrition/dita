/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.classification;

import dita.commons.services.lookup.DependantLookupService;
import dita.globodiet.dom.params.food_table.ItemDefinition;
import dita.globodiet.dom.params.food_table.ItemDefinition_foodOrRecipeGroup;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeGroup;
import dita.globodiet.dom.params.recipe_description.BrandForRecipe;
import dita.globodiet.dom.params.recipe_description.BrandForRecipe_recipeGroup;
import dita.globodiet.dom.params.recipe_description.CrossReferenceBetweenRecipeGroupAndDescriptor;
import dita.globodiet.dom.params.recipe_description.CrossReferenceBetweenRecipeGroupAndDescriptor_recipeGroup;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets_recipeGroup;
import dita.globodiet.dom.params.recipe_list.Recipe;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient_foodOrRecipeGroup;
import dita.globodiet.dom.params.recipe_list.Recipe_recipeGroup;
import dita.globodiet.dom.params.recipe_max.MaximumValueForARecipeOrGroup;
import dita.globodiet.dom.params.recipe_max.MaximumValueForARecipeOrGroup_recipeGroup;
import dita.globodiet.dom.params.recipe_probing.ProbingQuestionPathwayForRecipes;
import dita.globodiet.dom.params.recipe_probing.ProbingQuestionPathwayForRecipes_recipeGroup;
import dita.globodiet.dom.params.recipe_quantif.QuantificationMethodsPathwayForRecipeGroup;
import dita.globodiet.dom.params.recipe_quantif.QuantificationMethodsPathwayForRecipeGroup_recipeGroupObj;
import jakarta.inject.Inject;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RecipeGroupDeps {
    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentRecipeSubgroupMappedByRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<RecipeSubgroup> coll() {
            return dependantLookup.findDependants(
                RecipeSubgroup.class,
                RecipeSubgroup_recipeGroup.class,
                RecipeSubgroup_recipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentItemDefinitionMappedByFoodOrRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<ItemDefinition> coll() {
            return dependantLookup.findDependants(
                ItemDefinition.class,
                ItemDefinition_foodOrRecipeGroup.class,
                ItemDefinition_foodOrRecipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeGroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentBrandForRecipeMappedByRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<BrandForRecipe> coll() {
            return dependantLookup.findDependants(
                BrandForRecipe.class,
                BrandForRecipe_recipeGroup.class,
                BrandForRecipe_recipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentCrossReferenceBetweenRecipeGroupAndDescriptorMappedByRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<CrossReferenceBetweenRecipeGroupAndDescriptor> coll() {
            return dependantLookup.findDependants(
                CrossReferenceBetweenRecipeGroupAndDescriptor.class,
                CrossReferenceBetweenRecipeGroupAndDescriptor_recipeGroup.class,
                CrossReferenceBetweenRecipeGroupAndDescriptor_recipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentRuleAppliedToFacetsMappedByRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<RuleAppliedToFacets> coll() {
            return dependantLookup.findDependants(
                RuleAppliedToFacets.class,
                RuleAppliedToFacets_recipeGroup.class,
                RuleAppliedToFacets_recipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentRecipeMappedByRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<Recipe> coll() {
            return dependantLookup.findDependants(
                Recipe.class,
                Recipe_recipeGroup.class,
                Recipe_recipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentRecipeIngredientMappedByFoodOrRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<RecipeIngredient> coll() {
            return dependantLookup.findDependants(
                RecipeIngredient.class,
                RecipeIngredient_foodOrRecipeGroup.class,
                RecipeIngredient_foodOrRecipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentMaximumValueForARecipeOrGroupMappedByRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<MaximumValueForARecipeOrGroup> coll() {
            return dependantLookup.findDependants(
                MaximumValueForARecipeOrGroup.class,
                MaximumValueForARecipeOrGroup_recipeGroup.class,
                MaximumValueForARecipeOrGroup_recipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentProbingQuestionPathwayForRecipesMappedByRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<ProbingQuestionPathwayForRecipes> coll() {
            return dependantLookup.findDependants(
                ProbingQuestionPathwayForRecipes.class,
                ProbingQuestionPathwayForRecipes_recipeGroup.class,
                ProbingQuestionPathwayForRecipes_recipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeGroup_dependentQuantificationMethodsPathwayForRecipeGroupMappedByRecipeGroupObj {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeGroup mixee;

        @MemberSupport
        public List<QuantificationMethodsPathwayForRecipeGroup> coll() {
            return dependantLookup.findDependants(
                QuantificationMethodsPathwayForRecipeGroup.class,
                QuantificationMethodsPathwayForRecipeGroup_recipeGroupObj.class,
                QuantificationMethodsPathwayForRecipeGroup_recipeGroupObj::prop,
                mixee);
        }
    }
}
