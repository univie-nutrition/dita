/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.quantif;

import dita.commons.services.foreignkey.HasSecondaryKey;
import dita.commons.services.foreignkey.ISecondaryKey;
import jakarta.inject.Named;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.PersistenceCapable;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.Value;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Where;

/**
 * Thickness for shape method
 */
@Named("dita.globodiet.params.quantif.ThicknessForShapeMethod")
@DomainObject
@DomainObjectLayout(
        describedAs = "Thickness for shape method"
)
@PersistenceCapable(
        table = "THICKNESS"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
public class ThicknessForShapeMethod implements HasSecondaryKey<ThicknessForShapeMethod> {
    /**
     * Thickness code (e.g. A,B,C,58_1,58_2...)
     */
    @Property
    @PropertyLayout(
            sequence = "1",
            describedAs = "Thickness code (e.g. A,B,C,58_1,58_2...)\n"
                            + "----\n"
                            + "required=true, unique=true",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "TH_CODE",
            allowsNull = "false",
            length = 10
    )
    @Getter
    @Setter
    private String code;

    /**
     * has no description
     */
    @Property
    @PropertyLayout(
            sequence = "2",
            describedAs = "has no description\n"
                            + "----\n"
                            + "required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "TH_THICK",
            allowsNull = "false"
    )
    @Getter
    @Setter
    private double thickness;

    /**
     * Comment attached to the thickness (e.g. small, medium, large…)
     */
    @Property
    @PropertyLayout(
            sequence = "3",
            describedAs = "Comment attached to the thickness (e.g. small, medium, large…)\n"
                            + "----\n"
                            + "required=true, unique=true",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "TH_COMMENT",
            allowsNull = "false",
            length = 100
    )
    @Getter
    @Setter
    private String comment;

    /**
     * For the food items, the food (sub)groups for which this thickness has to be proposed.
     * These (sub)groups have to be separated with a comma (e.g. 0603,1002,1003,1101)
     * When this field is empty, that means that this thickness has always to be proposed
     * whatever the food classification. multiple subgroup.group and/or subgroup.subgroup1
     * and/or subgroup.subgroup2 commaseparated (e.g. 0603,10,1102)
     */
    @Property
    @PropertyLayout(
            sequence = "4",
            describedAs = "For the food items, the food (sub)groups for which this thickness has to be proposed.\n"
                            + "These (sub)groups have to be separated with a comma (e.g. 0603,1002,1003,1101)\n"
                            + "When this field is empty, that means that this thickness has always to be proposed\n"
                            + "whatever the food classification. multiple subgroup.group and/or subgroup.subgroup1\n"
                            + "and/or subgroup.subgroup2 commaseparated (e.g. 0603,10,1102)\n"
                            + "----\n"
                            + "required=true, unique=false",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "TH_FDCLASS",
            allowsNull = "false",
            length = 100
    )
    @Getter
    @Setter
    private String foodSubgroupsLookupKey;

    /**
     * For the recipe items, the recipe (sub)groups for which this thickness has to be proposed.
     * These (sub)groups have to be separated with a comma (e.g. 01,02,0301)
     * When this field is empty, that means that this thickness has always to be proposed
     * whatever the recipe classification; muliple rsubgr.group and/or rsubgr.subgroup commaseparated (e.g. 01,0601)
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            sequence = "5",
            describedAs = "For the recipe items, the recipe (sub)groups for which this thickness has to be proposed.\n"
                            + "These (sub)groups have to be separated with a comma (e.g. 01,02,0301)\n"
                            + "When this field is empty, that means that this thickness has always to be proposed\n"
                            + "whatever the recipe classification; muliple rsubgr.group and/or rsubgr.subgroup commaseparated (e.g. 01,0601)\n"
                            + "----\n"
                            + "required=false, unique=false",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "TH_RCPCLASS",
            allowsNull = "true",
            length = 100
    )
    @Getter
    @Setter
    private String recipeSubgroupsLookupKey;

    @ObjectSupport
    public String title() {
        return String.format("%f (code=%s)", thickness);
    }

    @Programmatic
    public SecondaryKey secondaryKey() {
        return new SecondaryKey(getCode());
    }

    @Programmatic
    public Unresolvable unresolvable() {
        return new Unresolvable(String.format("UNRESOLVABLE %s", new SecondaryKey(getCode())));
    }

    /**
     * SecondaryKey for @{link ThicknessForShapeMethod}
     */
    @Value
    public static final class SecondaryKey implements ISecondaryKey<ThicknessForShapeMethod> {
        private static final long serialVersionUID = 1;

        /**
         * Thickness code (e.g. A,B,C,58_1,58_2...)
         */
        private String code;

        @Override
        public Class<ThicknessForShapeMethod> correspondingClass() {
            return ThicknessForShapeMethod.class;
        }

        @Override
        public final Unresolvable unresolvable() {
            return new Unresolvable(String.format("UNRESOLVABLE %s", this));
        }
    }

    /**
     * Placeholder @{link ViewModel} for @{link ThicknessForShapeMethod} in case of an unresolvable secondary key.
     */
    @DomainObjectLayout(
            describedAs = "Unresolvable ThicknessForShapeMethod",
            cssClassFa = "skull red"
    )
    @RequiredArgsConstructor
    public static final class Unresolvable extends ThicknessForShapeMethod implements ViewModel {
        @Getter(
                onMethod_ = {@Override}
        )
        @Accessors(
                fluent = true
        )
        private final String viewModelMemento;

        @Override
        public String title() {
            return viewModelMemento;
        }
    }
}
