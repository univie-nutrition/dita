/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.classification;

import dita.commons.services.lookup.DependantLookupService;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatLeftInTheDishForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatLeftInTheDishForFood_fatGroup;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_foodGroup;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssFatGroup;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood_fatGroup;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood_foodGroup;
import dita.globodiet.dom.params.food_descript.Brand;
import dita.globodiet.dom.params.food_descript.Brand_foodGroup;
import dita.globodiet.dom.params.food_descript.CrossReferenceBetweenFoodGroupAndDescriptor;
import dita.globodiet.dom.params.food_descript.CrossReferenceBetweenFoodGroupAndDescriptor_foodGroup;
import dita.globodiet.dom.params.food_descript.ImprobableSequenceOfFacetAndDescriptor;
import dita.globodiet.dom.params.food_descript.ImprobableSequenceOfFacetAndDescriptor_foodGroup;
import dita.globodiet.dom.params.food_descript.RuleAppliedToFacet;
import dita.globodiet.dom.params.food_descript.RuleAppliedToFacet_foodGroup;
import dita.globodiet.dom.params.food_list.Food;
import dita.globodiet.dom.params.food_list.Food_foodGroup;
import dita.globodiet.dom.params.food_max.MaximumValueForAFoodOrGroup;
import dita.globodiet.dom.params.food_max.MaximumValueForAFoodOrGroup_foodGroup;
import dita.globodiet.dom.params.food_probing.ProbingQuestionPathwayForFoods;
import dita.globodiet.dom.params.food_probing.ProbingQuestionPathwayForFoods_foodGroup;
import dita.globodiet.dom.params.food_quantif.QuantificationMethodsPathwayForFoodGroup;
import dita.globodiet.dom.params.food_quantif.QuantificationMethodsPathwayForFoodGroup_foodGroup;
import dita.globodiet.dom.params.food_table.ItemDefinition;
import dita.globodiet.dom.params.food_table.ItemDefinition_foodOrRecipeGroup;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssFatGroup;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient_foodOrRecipeGroup;
import dita.globodiet.dom.params.setting.GroupSubstitution;
import dita.globodiet.dom.params.setting.GroupSubstitution_foodGroup;
import jakarta.inject.Inject;
import java.lang.Class;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.commons.collections.Can;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FoodGroupDeps {
    public static Can<Class<?>> mixinClasses() {
        return Can.of(FoodGroup_dependentFoodSubgroupMappedByFoodGroup.class,
        FoodGroup_dependentPercentOfFatLeftInTheDishForFoodMappedByFatGroup.class,
        FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFoodGroup.class,
        FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFssFatGroup.class,
        FoodGroup_dependentPercentOfFatUseDuringCookingForFoodMappedByFoodGroup.class,
        FoodGroup_dependentPercentOfFatUseDuringCookingForFoodMappedByFatGroup.class,
        FoodGroup_dependentBrandMappedByFoodGroup.class,
        FoodGroup_dependentCrossReferenceBetweenFoodGroupAndDescriptorMappedByFoodGroup.class,
        FoodGroup_dependentImprobableSequenceOfFacetAndDescriptorMappedByFoodGroup.class,
        FoodGroup_dependentRuleAppliedToFacetMappedByFoodGroup.class,
        FoodGroup_dependentFoodMappedByFoodGroup.class,
        FoodGroup_dependentMaximumValueForAFoodOrGroupMappedByFoodGroup.class,
        FoodGroup_dependentProbingQuestionPathwayForFoodsMappedByFoodGroup.class,
        FoodGroup_dependentQuantificationMethodsPathwayForFoodGroupMappedByFoodGroup.class,
        FoodGroup_dependentItemDefinitionMappedByFoodOrRecipeGroup.class,
        FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByFssFatGroup.class,
        FoodGroup_dependentRecipeIngredientMappedByFoodOrRecipeGroup.class,
        FoodGroup_dependentGroupSubstitutionMappedByFoodGroup.class);
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentFoodSubgroupMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<FoodSubgroup> coll() {
            return dependantLookup.findDependants(
                FoodSubgroup.class,
                FoodSubgroup_foodGroup.class,
                FoodSubgroup_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatLeftInTheDishForFoodMappedByFatGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatLeftInTheDishForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatLeftInTheDishForFood.class,
                PercentOfFatLeftInTheDishForFood_fatGroup.class,
                PercentOfFatLeftInTheDishForFood_fatGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_foodGroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFssFatGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssFatGroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssFatGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatUseDuringCookingForFoodMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatUseDuringCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatUseDuringCookingForFood.class,
                PercentOfFatUseDuringCookingForFood_foodGroup.class,
                PercentOfFatUseDuringCookingForFood_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatUseDuringCookingForFoodMappedByFatGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatUseDuringCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatUseDuringCookingForFood.class,
                PercentOfFatUseDuringCookingForFood_fatGroup.class,
                PercentOfFatUseDuringCookingForFood_fatGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentBrandMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<Brand> coll() {
            return dependantLookup.findDependants(
                Brand.class,
                Brand_foodGroup.class,
                Brand_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentCrossReferenceBetweenFoodGroupAndDescriptorMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<CrossReferenceBetweenFoodGroupAndDescriptor> coll() {
            return dependantLookup.findDependants(
                CrossReferenceBetweenFoodGroupAndDescriptor.class,
                CrossReferenceBetweenFoodGroupAndDescriptor_foodGroup.class,
                CrossReferenceBetweenFoodGroupAndDescriptor_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentImprobableSequenceOfFacetAndDescriptorMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<ImprobableSequenceOfFacetAndDescriptor> coll() {
            return dependantLookup.findDependants(
                ImprobableSequenceOfFacetAndDescriptor.class,
                ImprobableSequenceOfFacetAndDescriptor_foodGroup.class,
                ImprobableSequenceOfFacetAndDescriptor_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentRuleAppliedToFacetMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<RuleAppliedToFacet> coll() {
            return dependantLookup.findDependants(
                RuleAppliedToFacet.class,
                RuleAppliedToFacet_foodGroup.class,
                RuleAppliedToFacet_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentFoodMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<Food> coll() {
            return dependantLookup.findDependants(
                Food.class,
                Food_foodGroup.class,
                Food_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentMaximumValueForAFoodOrGroupMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<MaximumValueForAFoodOrGroup> coll() {
            return dependantLookup.findDependants(
                MaximumValueForAFoodOrGroup.class,
                MaximumValueForAFoodOrGroup_foodGroup.class,
                MaximumValueForAFoodOrGroup_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentProbingQuestionPathwayForFoodsMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<ProbingQuestionPathwayForFoods> coll() {
            return dependantLookup.findDependants(
                ProbingQuestionPathwayForFoods.class,
                ProbingQuestionPathwayForFoods_foodGroup.class,
                ProbingQuestionPathwayForFoods_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentQuantificationMethodsPathwayForFoodGroupMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<QuantificationMethodsPathwayForFoodGroup> coll() {
            return dependantLookup.findDependants(
                QuantificationMethodsPathwayForFoodGroup.class,
                QuantificationMethodsPathwayForFoodGroup_foodGroup.class,
                QuantificationMethodsPathwayForFoodGroup_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentItemDefinitionMappedByFoodOrRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<ItemDefinition> coll() {
            return dependantLookup.findDependants(
                ItemDefinition.class,
                ItemDefinition_foodOrRecipeGroup.class,
                ItemDefinition_foodOrRecipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByFssFatGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssFatGroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssFatGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentRecipeIngredientMappedByFoodOrRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<RecipeIngredient> coll() {
            return dependantLookup.findDependants(
                RecipeIngredient.class,
                RecipeIngredient_foodOrRecipeGroup.class,
                RecipeIngredient_foodOrRecipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class FoodGroup_dependentGroupSubstitutionMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<GroupSubstitution> coll() {
            return dependantLookup.findDependants(
                GroupSubstitution.class,
                GroupSubstitution_foodGroup.class,
                GroupSubstitution_foodGroup::prop,
                mixee);
        }
    }
}
