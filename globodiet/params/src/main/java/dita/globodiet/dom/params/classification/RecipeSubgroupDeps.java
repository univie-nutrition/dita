/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.classification;

import dita.commons.services.lookup.DependantLookupService;
import dita.globodiet.dom.params.food_table.NutrientForFoodOrGroup;
import dita.globodiet.dom.params.food_table.NutrientForFoodOrGroup_foodOrRecipeSubgroup;
import dita.globodiet.dom.params.quantif.ThicknessForShapeMethod;
import dita.globodiet.dom.params.quantif.ThicknessForShapeMethod_recipeSubgroups;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeSubgroup;
import dita.globodiet.dom.params.recipe_description.FacetDescriptorPathwayForRecipeGroup;
import dita.globodiet.dom.params.recipe_description.FacetDescriptorPathwayForRecipeGroup_recipeSubgroup;
import dita.globodiet.dom.params.recipe_description.RecipeBrand;
import dita.globodiet.dom.params.recipe_description.RecipeBrand_recipeSubgroup;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets_recipeSubgroup;
import dita.globodiet.dom.params.recipe_list.Recipe;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient_foodOrRecipeSubgroup;
import dita.globodiet.dom.params.recipe_list.Recipe_recipeSubgroup;
import dita.globodiet.dom.params.recipe_max.MaximumValueForARecipeOrGroup;
import dita.globodiet.dom.params.recipe_max.MaximumValueForARecipeOrGroup_recipeSubgroup;
import dita.globodiet.dom.params.recipe_probing.ProbingQuestionPathwayForRecipe;
import dita.globodiet.dom.params.recipe_probing.ProbingQuestionPathwayForRecipe_recipeSubgroup;
import dita.globodiet.dom.params.setting.GroupSubstitution;
import dita.globodiet.dom.params.setting.GroupSubstitution_applyToRecipeGroups;
import jakarta.inject.Inject;
import java.lang.Class;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.commons.collections.Can;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RecipeSubgroupDeps {
    public static Can<Class<?>> mixinClasses() {
        return Can.of(RecipeSubgroup_dependentNutrientForFoodOrGroupMappedByFoodOrRecipeSubgroup.class,
        RecipeSubgroup_dependentThicknessForShapeMethodMappedByRecipeSubgroups.class,
        RecipeSubgroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentFacetDescriptorPathwayForRecipeGroupMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentRecipeBrandMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentRuleAppliedToFacetsMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentRecipeMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentRecipeIngredientMappedByFoodOrRecipeSubgroup.class,
        RecipeSubgroup_dependentMaximumValueForARecipeOrGroupMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentProbingQuestionPathwayForRecipeMappedByRecipeSubgroup.class,
        RecipeSubgroup_dependentGroupSubstitutionMappedByApplyToRecipeGroups.class);
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentNutrientForFoodOrGroupMappedByFoodOrRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<NutrientForFoodOrGroup> coll() {
            return dependantLookup.findDependants(
                NutrientForFoodOrGroup.class,
                NutrientForFoodOrGroup_foodOrRecipeSubgroup.class,
                NutrientForFoodOrGroup_foodOrRecipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentThicknessForShapeMethodMappedByRecipeSubgroups {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<ThicknessForShapeMethod> coll() {
            return dependantLookup.findDependants(
                ThicknessForShapeMethod.class,
                ThicknessForShapeMethod_recipeSubgroups.class,
                ThicknessForShapeMethod_recipeSubgroups::coll,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeSubgroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentFacetDescriptorPathwayForRecipeGroupMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<FacetDescriptorPathwayForRecipeGroup> coll() {
            return dependantLookup.findDependants(
                FacetDescriptorPathwayForRecipeGroup.class,
                FacetDescriptorPathwayForRecipeGroup_recipeSubgroup.class,
                FacetDescriptorPathwayForRecipeGroup_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentRecipeBrandMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<RecipeBrand> coll() {
            return dependantLookup.findDependants(
                RecipeBrand.class,
                RecipeBrand_recipeSubgroup.class,
                RecipeBrand_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentRuleAppliedToFacetsMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<RuleAppliedToFacets> coll() {
            return dependantLookup.findDependants(
                RuleAppliedToFacets.class,
                RuleAppliedToFacets_recipeSubgroup.class,
                RuleAppliedToFacets_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentRecipeMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<Recipe> coll() {
            return dependantLookup.findDependants(
                Recipe.class,
                Recipe_recipeSubgroup.class,
                Recipe_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentRecipeIngredientMappedByFoodOrRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<RecipeIngredient> coll() {
            return dependantLookup.findDependants(
                RecipeIngredient.class,
                RecipeIngredient_foodOrRecipeSubgroup.class,
                RecipeIngredient_foodOrRecipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentMaximumValueForARecipeOrGroupMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<MaximumValueForARecipeOrGroup> coll() {
            return dependantLookup.findDependants(
                MaximumValueForARecipeOrGroup.class,
                MaximumValueForARecipeOrGroup_recipeSubgroup.class,
                MaximumValueForARecipeOrGroup_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentProbingQuestionPathwayForRecipeMappedByRecipeSubgroup {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<ProbingQuestionPathwayForRecipe> coll() {
            return dependantLookup.findDependants(
                ProbingQuestionPathwayForRecipe.class,
                ProbingQuestionPathwayForRecipe_recipeSubgroup.class,
                ProbingQuestionPathwayForRecipe_recipeSubgroup::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class RecipeSubgroup_dependentGroupSubstitutionMappedByApplyToRecipeGroups {
        @Inject
        DependantLookupService dependantLookup;

        private final RecipeSubgroup mixee;

        @MemberSupport
        public List<GroupSubstitution> coll() {
            return dependantLookup.findDependants(
                GroupSubstitution.class,
                GroupSubstitution_applyToRecipeGroups.class,
                GroupSubstitution_applyToRecipeGroups::coll,
                mixee);
        }
    }
}
