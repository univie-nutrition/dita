/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.setting;

import jakarta.inject.Named;
import java.lang.Double;
import java.lang.String;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.PersistenceCapable;
import lombok.Getter;
import lombok.Setter;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Where;

/**
 * Minimum and maximum value for macro-nutrient
 */
@Named("dita.globodiet.params.setting.MacroNutrientLimit")
@DomainObject
@DomainObjectLayout(
        describedAs = "Minimum and maximum value for macro-nutrient"
)
@PersistenceCapable(
        table = "NUTLIMIT"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
public class MacroNutrientLimit {
    /**
     * Name of nutrient
     */
    @Property
    @PropertyLayout(
            sequence = "1",
            describedAs = "Name of nutrient<br>----<br>required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "NAME",
            allowsNull = "false",
            length = 50
    )
    @Getter
    @Setter
    private String nameOfNutrient;

    /**
     * Minimum value
     */
    @Property
    @PropertyLayout(
            sequence = "2",
            describedAs = "Minimum value<br>----<br>required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "MIN",
            allowsNull = "false"
    )
    @Getter
    @Setter
    private double minimumValue;

    /**
     * Maximum value
     */
    @Property
    @PropertyLayout(
            sequence = "3",
            describedAs = "Maximum value<br>----<br>required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "MAX",
            allowsNull = "false"
    )
    @Getter
    @Setter
    private double maximumValue;

    /**
     * Unit (g, kcal or blanc)
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            sequence = "4",
            describedAs = "Unit (g, kcal or blanc)<br>----<br>required=false, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "UNIT",
            allowsNull = "true",
            length = 50
    )
    @Getter
    @Setter
    private String unit;

    /**
     * 1=man, 2=woman
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            sequence = "5",
            describedAs = "1=man, 2=woman<br>----<br>required=false, unique=true",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "SEX",
            allowsNull = "true",
            length = 1
    )
    @Getter
    @Setter
    private String sex;

    /**
     * PAL value
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            sequence = "6",
            describedAs = "PAL value<br>----<br>required=false, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "VAL",
            allowsNull = "true"
    )
    @Getter
    @Setter
    private Double palValue;

    @ObjectSupport
    public String title() {
        return this.toString();
    }
}
