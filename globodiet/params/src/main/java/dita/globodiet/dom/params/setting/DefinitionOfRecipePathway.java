/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.setting;

import jakarta.inject.Named;
import java.lang.Integer;
import java.lang.String;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.Extension;
import javax.jdo.annotations.PersistenceCapable;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Where;

/**
 * Definition of recipe pathway (available for each recipe type)
 */
@Named("dita.globodiet.params.setting.DefinitionOfRecipePathway")
@DomainObject
@DomainObjectLayout(
        describedAs = "Definition of recipe pathway (available for each recipe type)"
)
@PersistenceCapable(
        table = "RCP_PATH"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
public class DefinitionOfRecipePathway {
    /**
     * Type of recipe:
     * 1.1=Open – Known
     * 1.2=Open – Unknown
     * 1.3=Open with brand
     * 2.1=Closed
     * 2.2=Closed with brand
     * 3.0=Commercial
     * 4.1=New – Known
     * 4.2=New – Unknown
     */
    @Property
    @PropertyLayout(
            sequence = "1",
            describedAs = "Type of recipe:<br>1.1=Open – Known<br>1.2=Open – Unknown<br>1.3=Open with brand<br>2.1=Closed<br>2.2=Closed with brand<br>3.0=Commercial<br>4.1=New – Known<br>4.2=New – Unknown<br>----<br>required=true, unique=true",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "R_TYPE",
            allowsNull = "false",
            length = 3
    )
    @Getter
    @Setter
    @Extension(
            vendorName = "datanucleus",
            key = "enum-check-constraint",
            value = "true"
    )
    @Extension(
            vendorName = "datanucleus",
            key = "enum-value-getter",
            value = "getMatchOn"
    )
    private TypeOfRecipe typeOfRecipe;

    /**
     * 0 = The ingredient window is not displayed
     * 1 = The ingredient window is displayed
     */
    @Property
    @PropertyLayout(
            sequence = "2",
            describedAs = "0 = The ingredient window is not displayed<br>1 = The ingredient window is displayed<br>----<br>required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "R_ING",
            allowsNull = "false"
    )
    @Getter
    @Setter
    @Extension(
            vendorName = "datanucleus",
            key = "enum-check-constraint",
            value = "true"
    )
    @Extension(
            vendorName = "datanucleus",
            key = "enum-value-getter",
            value = "getMatchOn"
    )
    private IngredientWindowIsDisplayedQ ingredientWindowIsDisplayedQ;

    /**
     * Functions allocated in NEW interview mode when the ingredient window is displayed (R_ING=1):
     * 1 = S - Substitute
     * 2 = SAD - Substitute, Add & Delete
     * 3 = SADQ - Substitute, Add, Delete & Quantify
     */
    @Property(
            optionality = Optionality.OPTIONAL
    )
    @PropertyLayout(
            sequence = "3",
            describedAs = "Functions allocated in NEW interview mode when the ingredient window is displayed (R_ING=1):<br>1 = S - Substitute<br>2 = SAD - Substitute, Add & Delete<br>3 = SADQ - Substitute, Add, Delete & Quantify<br>----<br>required=false, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "N_IFUNCTION",
            allowsNull = "true"
    )
    @Getter
    @Setter
    @Extension(
            vendorName = "datanucleus",
            key = "enum-check-constraint",
            value = "true"
    )
    @Extension(
            vendorName = "datanucleus",
            key = "enum-value-getter",
            value = "getMatchOn"
    )
    private FunctionsAllocatedInNEWInterviewModeWhenTheIngredientWindowIsDisplayed functionsAllocatedInNEWInterviewModeWhenTheIngredientWindowIsDisplayed;

    /**
     * Functions allocated in EDIT interview mode when the ingredient window is displayed (R_ING=1):
     * 1 = S - Substitute
     * 2 = SAD - Substitute, Add & Delete
     * 3 = SADQ - Substitute, Add, Delete & Quantify
     */
    @Property
    @PropertyLayout(
            sequence = "4",
            describedAs = "Functions allocated in EDIT interview mode when the ingredient window is displayed (R_ING=1):<br>1 = S - Substitute<br>2 = SAD - Substitute, Add & Delete<br>3 = SADQ - Substitute, Add, Delete & Quantify<br>----<br>required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "E_IFUNCTION",
            allowsNull = "false"
    )
    @Getter
    @Setter
    @Extension(
            vendorName = "datanucleus",
            key = "enum-check-constraint",
            value = "true"
    )
    @Extension(
            vendorName = "datanucleus",
            key = "enum-value-getter",
            value = "getMatchOn"
    )
    private FunctionsAllocatedInEDITInterviewModeWhenTheIngredientWindowIsDisplayed functionsAllocatedInEDITInterviewModeWhenTheIngredientWindowIsDisplayed;

    /**
     * Display of the automatic note window:
     * 0 = No display of note window
     * 1 = Display of note window
     * 2 = Display of note window only for Add & Delete functions
     */
    @Property
    @PropertyLayout(
            sequence = "5",
            describedAs = "Display of the automatic note window:<br>0 = No display of note window<br>1 = Display of note window<br>2 = Display of note window only for Add & Delete functions<br>----<br>required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "D_NOTES",
            allowsNull = "false"
    )
    @Getter
    @Setter
    @Extension(
            vendorName = "datanucleus",
            key = "enum-check-constraint",
            value = "true"
    )
    @Extension(
            vendorName = "datanucleus",
            key = "enum-value-getter",
            value = "getMatchOn"
    )
    private DisplayOfTheAutomaticNoteWindow displayOfTheAutomaticNoteWindow;

    @ObjectSupport
    public String title() {
        return this.toString();
    }

    @RequiredArgsConstructor
    public enum TypeOfRecipe {
        /**
         * no description
         */
        OPEN_KNOWN("1.1", "Open–Known"),

        /**
         * no description
         */
        OPEN_UNKNOWN("1.2", "Open–Unknown"),

        /**
         * no description
         */
        OPEN_WITH_BRAND("1.3", "Open with brand"),

        /**
         * no description
         */
        CLOSED("2.1", "Closed"),

        /**
         * no description
         */
        CLOSED_WITH_BRAND("2.2", "Closed with brand"),

        /**
         * no description
         */
        COMMERCIAL("3.0", "Commercial"),

        /**
         * no description
         */
        NEW_KNOWN("4.1", "New–Known"),

        /**
         * no description
         */
        NEW_UNKNOWN("4.2", "New–Unknown");

        @Getter
        private final String matchOn;

        @Accessors(
                fluent = true
        )
        private final String title;
    }

    @RequiredArgsConstructor
    public enum IngredientWindowIsDisplayedQ {
        /**
         * The ingredient window is not displayed
         */
        HIDDEN(0, "hidden"),

        /**
         * The ingredient window is displayed
         */
        DISPLAYED(1, "displayed");

        @Getter
        private final int matchOn;

        @Accessors(
                fluent = true
        )
        private final String title;
    }

    @RequiredArgsConstructor
    public enum FunctionsAllocatedInNEWInterviewModeWhenTheIngredientWindowIsDisplayed {
        /**
         * Substitute
         */
        S(1, "S"),

        /**
         * Substitute, Add & Delete
         */
        SAD(2, "SAD"),

        /**
         * Substitute, Add, Delete & Quantify
         */
        SADQ(3, "SADQ");

        @Getter
        private final Integer matchOn;

        @Accessors(
                fluent = true
        )
        private final String title;
    }

    @RequiredArgsConstructor
    public enum FunctionsAllocatedInEDITInterviewModeWhenTheIngredientWindowIsDisplayed {
        /**
         * Substitute
         */
        S(1, "S"),

        /**
         * Substitute, Add & Delete
         */
        SAD(2, "SAD"),

        /**
         * Substitute, Add, Delete & Quantify
         */
        SADQ(3, "SADQ");

        @Getter
        private final int matchOn;

        @Accessors(
                fluent = true
        )
        private final String title;
    }

    @RequiredArgsConstructor
    public enum DisplayOfTheAutomaticNoteWindow {
        /**
         * No display of note window
         */
        HIDDEN(0, "hidden"),

        /**
         * Display of note window
         */
        DISPLAYED(1, "displayed"),

        /**
         * Display of note window only for Add & Delete functions
         */
        DISPLAYED_ONLY_FOR_ADD_DELETE(2, "displayed only for add/delete");

        @Getter
        private final int matchOn;

        @Accessors(
                fluent = true
        )
        private final String title;
    }
}
