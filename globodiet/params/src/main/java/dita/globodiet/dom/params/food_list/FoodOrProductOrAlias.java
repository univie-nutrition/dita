/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.food_list;

import jakarta.inject.Named;
import java.lang.Integer;
import java.lang.String;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.PersistenceCapable;
import lombok.Getter;
import lombok.Setter;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Where;

/**
 * Food List and Shadow item list entry
 */
@Named("dita.globodiet.params.food_list.FoodOrProductOrAlias")
@DomainObject
@DomainObjectLayout(
        describedAs = "Food List and Shadow item list entry",
        cssClassFa = "solid utensils darkgreen"
)
@PersistenceCapable(
        table = "FOODS"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
public class FoodOrProductOrAlias {
    /**
     * Food/C.R. Identification Code
     */
    @Property
    @PropertyLayout(
            sequence = "1",
            describedAs = "Food/C.R. Identification Code",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "FOODNUM",
            allowsNull = "true",
            length = 5
    )
    @Getter
    @Setter
    private String foodIdNumber;

    /**
     * Food Group code
     */
    @Property
    @PropertyLayout(
            sequence = "2",
            describedAs = "Food Group code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "GROUP",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String foodGroupCode;

    /**
     * Food Subgroup code
     */
    @Property
    @PropertyLayout(
            sequence = "3",
            describedAs = "Food Subgroup code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "SUBGROUP1",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String foodSubgroupCode;

    /**
     * Food Sub(sub)group code
     */
    @Property
    @PropertyLayout(
            sequence = "4",
            describedAs = "Food Sub(sub)group code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "SUBGROUP2",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String foodSubSubgroupCode;

    /**
     * Food/C.R. Name (Country name)
     */
    @Property
    @PropertyLayout(
            sequence = "5",
            describedAs = "Food/C.R. Name (Country name)",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "NAME",
            allowsNull = "true",
            length = 100
    )
    @Getter
    @Setter
    private String foodNativeName;

    /**
     * Type of item:<br>
     * {} -> Normal Food Item<br>
     * GI -> Generic Food Item<br>
     * SH -> Shadow Item<br>
     * CR -> Composed Recipe (a.huber: does not appear to be used anywhere)<br>
     * Definition: its different ingredients can be identified and<br>
     * quantified separately after preparation<br>
     * (e.g. meat balls in sauce, rice with sauce, couscous dish, mixed salad)<br>
     * or just before mixing (e.g. coffee with milk).<br>
     * Composed recipes are built during the interview: there is no a priori list of composed recipes.<br>
     * They are made from items listed below/linked to a quick list item.<br>
     * Example: Salad<br>
     * - Lettuce<br>
     * - Tomato<br>
     * - Cucumber<br>
     * - Salad dressing (can be a recipe in some projects where all sauces are in recipes)
     */
    @Property
    @PropertyLayout(
            sequence = "6",
            describedAs = "Type of item:<br>\n"
                            + "{} -> Normal Food Item<br>\n"
                            + "GI -> Generic Food Item<br>\n"
                            + "SH -> Shadow Item<br>\n"
                            + "CR -> Composed Recipe (a.huber: does not appear to be used anywhere)<br>\n"
                            + "Definition: its different ingredients can be identified and<br>\n"
                            + "quantified separately after preparation<br>\n"
                            + "(e.g. meat balls in sauce, rice with sauce, couscous dish, mixed salad)<br>\n"
                            + "or just before mixing (e.g. coffee with milk).<br>\n"
                            + "Composed recipes are built during the interview: there is no a priori list of composed recipes.<br>\n"
                            + "They are made from items listed below/linked to a quick list item.<br>\n"
                            + "Example: Salad<br>\n"
                            + "- Lettuce<br>\n"
                            + "- Tomato<br>\n"
                            + "- Cucumber<br>\n"
                            + "- Salad dressing (can be a recipe in some projects where all sauces are in recipes)",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "TYPE",
            allowsNull = "true",
            length = 2
    )
    @Getter
    @Setter
    private String typeOfItem;

    /**
     * Auxiliary field to force an internal order within each subgroup<br>
     * (if GI then 1 otherwise 2, this forces the GI at the top)
     */
    @Property
    @PropertyLayout(
            sequence = "7",
            describedAs = "Auxiliary field to force an internal order within each subgroup<br>\n"
                            + "(if GI then 1 otherwise 2, this forces the GI at the top)",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "ORDER",
            allowsNull = "true",
            length = 1
    )
    @Getter
    @Setter
    private String groupOrdinal;

    /**
     * 0=food 1=food & dietary supplement
     */
    @Property
    @PropertyLayout(
            sequence = "8",
            describedAs = "0=food 1=food & dietary supplement",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "SUPPL",
            allowsNull = "true"
    )
    @Getter
    @Setter
    private Integer dietarySupplementQ;

    @ObjectSupport
    public String title() {
        return String.format("%s (code=%s)", foodNativeName, foodIdNumber);
    }
}
