/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.quantif;

import jakarta.inject.Named;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.PersistenceCapable;
import lombok.Getter;
import lombok.Setter;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;

/**
 * Shape
 */
@Named("dita.globodiet.params.quantif.Shape")
@DomainObject
@DomainObjectLayout(
    describedAs = "Shape"
)
@PersistenceCapable(
    table = "M_SHAPES"
)
@DatastoreIdentity(
    strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
    column = "id"
)
public class Shape {
  /**
   * Shape code (e.g. S001,S002,S003,...)
   */
  @Property
  @PropertyLayout(
      describedAs = "Shape code (e.g. S001,S002,S003,...)"
  )
  @Column(
      name = "SH_CODE",
      allowsNull = "true",
      length = 5
  )
  @Getter
  @Setter
  private String shapeCode;

  /**
   * Shape surface in cm2 (e.g. 200cm2). 2 decimals can be possible
   */
  @Property
  @PropertyLayout(
      describedAs = "Shape surface in cm2 (e.g. 200cm2). 2 decimals can be possible"
  )
  @Column(
      name = "SH_SURFACE",
      allowsNull = "true"
  )
  @Getter
  @Setter
  private Double shapeSurfaceInCm2;

  /**
   * Comment attached to the shape (e.g. oval bread small or oval bread medium or oval bread large…)
   */
  @Property
  @PropertyLayout(
      describedAs = "Comment attached to the shape (e.g. oval bread small or oval bread medium or oval bread large…)"
  )
  @Column(
      name = "SH_COMMENT",
      allowsNull = "true",
      length = 100
  )
  @Getter
  @Setter
  private String commentAttachedToTheShape;

  /**
   * Order to display the standard unit
   */
  @Property
  @PropertyLayout(
      describedAs = "Order to display the standard unit"
  )
  @Column(
      name = "SH_ORDER",
      allowsNull = "true"
  )
  @Getter
  @Setter
  private Integer orderToDisplayTheStandardUnit;
}
