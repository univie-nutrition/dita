/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.quantif;

import dita.commons.services.lookup.HasSecondaryKey;
import dita.commons.services.lookup.ISecondaryKey;
import dita.commons.services.search.SearchService;
import jakarta.inject.Named;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.PersistenceCapable;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DependentDefaultsPolicy;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Where;

/**
 * Shape
 */
@Named("dita.globodiet.params.quantif.Shape")
@DomainObject
@DomainObjectLayout(
        describedAs = "Shape"
)
@PersistenceCapable(
        table = "M_SHAPES"
)
@DatastoreIdentity(
        strategy = javax.jdo.annotations.IdGeneratorStrategy.IDENTITY,
        column = "id"
)
public class Shape implements HasSecondaryKey<Shape> {
    /**
     * Shape code (e.g. S001,S002,S003,...)
     */
    @Property
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "1",
            describedAs = "Shape code (e.g. S001,S002,S003,...)\n"
                            + "----\n"
                            + "required=true, unique=true",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "SH_CODE",
            allowsNull = "false",
            length = 5
    )
    @Getter
    @Setter
    private String shapeCode;

    /**
     * Shape surface in cm2 (e.g. 200cm2). 2 decimals can be possible
     */
    @Property(
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "2",
            describedAs = "Shape surface in cm2 (e.g. 200cm2). 2 decimals can be possible\n"
                            + "----\n"
                            + "required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "SH_SURFACE",
            allowsNull = "false"
    )
    @Getter
    @Setter
    private double shapeSurfaceInCm2;

    /**
     * Comment attached to the shape (e.g. oval bread small or oval bread medium or oval bread large…)
     */
    @Property(
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "3",
            describedAs = "Comment attached to the shape (e.g. oval bread small or oval bread medium or oval bread large…)\n"
                            + "----\n"
                            + "required=true, unique=false",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "SH_COMMENT",
            allowsNull = "false",
            length = 100
    )
    @Getter
    @Setter
    private String commentAttachedToTheShape;

    /**
     * Order to display the standard unit
     */
    @Property(
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "4",
            describedAs = "Order to display the standard unit\n"
                            + "----\n"
                            + "required=true, unique=true",
            hidden = Where.NOWHERE
    )
    @Column(
            name = "SH_ORDER",
            allowsNull = "false"
    )
    @Getter
    @Setter
    private int orderToDisplayTheStandardUnit;

    @ObjectSupport
    public String title() {
        return this.toString();
    }

    @Programmatic
    public SecondaryKey secondaryKey() {
        return new SecondaryKey(getShapeCode());
    }

    @Programmatic
    public Unresolvable unresolvable() {
        return new Unresolvable(String.format("UNRESOLVABLE %s", new SecondaryKey(getShapeCode())));
    }

    /**
     * Manager Viewmodel for @{link Shape}
     */
    @Named("dita.globodiet.params.quantif.Shape.Manager")
    @DomainObjectLayout(
            describedAs = "Shape"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Shape";
        }

        @Collection
        public final List<Shape> getListOfShape() {
            return searchService.search(Shape.class, Shape::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }

    /**
     * Parameter model for @{link Shape}
     * @param shapeCode Shape code (e.g. S001,S002,S003,...)
     * @param shapeSurfaceInCm2 Shape surface in cm2 (e.g. 200cm2). 2 decimals can be possible
     * @param commentAttachedToTheShape Comment attached to the shape (e.g. oval bread small or oval bread medium or oval bread large…)
     * @param orderToDisplayTheStandardUnit Order to display the standard unit
     */
    public final record Params(
            @Parameter(
                    dependentDefaultsPolicy = DependentDefaultsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.MANDATORY
            )
            @ParameterLayout(
                    describedAs = "Shape code (e.g. S001,S002,S003,...)"
            )
            String shapeCode,
            @Parameter(
                    dependentDefaultsPolicy = DependentDefaultsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.MANDATORY
            )
            @ParameterLayout(
                    describedAs = "Shape surface in cm2 (e.g. 200cm2). 2 decimals can be possible"
            )
            double shapeSurfaceInCm2,
            @Parameter(
                    dependentDefaultsPolicy = DependentDefaultsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.MANDATORY
            )
            @ParameterLayout(
                    describedAs = "Comment attached to the shape (e.g. oval bread small or oval bread medium or oval bread large…)"
            )
            String commentAttachedToTheShape,
            @Parameter(
                    dependentDefaultsPolicy = DependentDefaultsPolicy.PRESERVE_CHANGES,
                    optionality = Optionality.MANDATORY
            )
            @ParameterLayout(
                    describedAs = "Order to display the standard unit"
            )
            int orderToDisplayTheStandardUnit) {
    }

    /**
     * SecondaryKey for @{link Shape}
     * @param shapeCode Shape code (e.g. S001,S002,S003,...)
     */
    public final record SecondaryKey(String shapeCode) implements ISecondaryKey<Shape> {
        @Override
        public Class<Shape> correspondingClass() {
            return Shape.class;
        }

        @Override
        public final Unresolvable unresolvable() {
            return new Unresolvable(String.format("UNRESOLVABLE %s", this));
        }
    }

    /**
     * Placeholder @{link ViewModel} for @{link Shape} in case of an unresolvable secondary key.
     */
    @DomainObjectLayout(
            describedAs = "Unresolvable Shape",
            cssClassFa = "skull red"
    )
    @RequiredArgsConstructor
    public static final class Unresolvable extends Shape implements ViewModel {
        @Getter(
                onMethod_ = {@Override}
        )
        @Accessors(
                fluent = true
        )
        private final String viewModelMemento;

        @Override
        public String title() {
            return viewModelMemento;
        }
    }
}
