/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by DitA-Tooling
package dita.globodiet.dom.params.food_descript;

import dita.commons.services.lookup.DependantLookupService;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets;
import dita.globodiet.dom.params.recipe_description.RuleAppliedToFacets_facetWhereTheRuleMustBeAppliedObj;
import dita.globodiet.dom.params.setting.FacetDescriptorThatCannotBeSubstituted;
import dita.globodiet.dom.params.setting.FacetDescriptorThatCannotBeSubstituted_facet;
import jakarta.inject.Inject;
import java.lang.Class;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.commons.collections.Can;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FacetDeps {
    public static Can<Class<?>> mixinClasses() {
        return Can.of(Facet_dependentCrossReferenceBetweenFoodGroupAndDescriptorMappedByFacet.class,
        Facet_dependentExceptionForSomeFoodToTheFacetDescriptorPathwayMappedByMandatoryInSequenceOfFacets.class,
        Facet_dependentFacetDescriptorMappedByFacet.class,
        Facet_dependentImprobableSequenceOfFacetAndDescriptorMappedByFacet.class,
        Facet_dependentRuleAppliedToFacetMappedByFacet.class,
        Facet_dependentRuleAppliedToFacetsMappedByFacetWhereTheRuleMustBeAppliedObj.class,
        Facet_dependentFacetDescriptorThatCannotBeSubstitutedMappedByFacet.class);
    }

    @Collection
    @RequiredArgsConstructor
    public static class Facet_dependentCrossReferenceBetweenFoodGroupAndDescriptorMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final Facet mixee;

        @MemberSupport
        public List<CrossReferenceBetweenFoodGroupAndDescriptor> coll() {
            return dependantLookup.findDependants(
                CrossReferenceBetweenFoodGroupAndDescriptor.class,
                CrossReferenceBetweenFoodGroupAndDescriptor_facet.class,
                CrossReferenceBetweenFoodGroupAndDescriptor_facet::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Facet_dependentExceptionForSomeFoodToTheFacetDescriptorPathwayMappedByMandatoryInSequenceOfFacets {
        @Inject
        DependantLookupService dependantLookup;

        private final Facet mixee;

        @MemberSupport
        public List<ExceptionForSomeFoodToTheFacetDescriptorPathway> coll() {
            return dependantLookup.findDependants(
                ExceptionForSomeFoodToTheFacetDescriptorPathway.class,
                ExceptionForSomeFoodToTheFacetDescriptorPathway_mandatoryInSequenceOfFacets.class,
                ExceptionForSomeFoodToTheFacetDescriptorPathway_mandatoryInSequenceOfFacets::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Facet_dependentFacetDescriptorMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final Facet mixee;

        @MemberSupport
        public List<FacetDescriptor> coll() {
            return dependantLookup.findDependants(
                FacetDescriptor.class,
                FacetDescriptor_facet.class,
                FacetDescriptor_facet::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Facet_dependentImprobableSequenceOfFacetAndDescriptorMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final Facet mixee;

        @MemberSupport
        public List<ImprobableSequenceOfFacetAndDescriptor> coll() {
            return dependantLookup.findDependants(
                ImprobableSequenceOfFacetAndDescriptor.class,
                ImprobableSequenceOfFacetAndDescriptor_facet.class,
                ImprobableSequenceOfFacetAndDescriptor_facet::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Facet_dependentRuleAppliedToFacetMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final Facet mixee;

        @MemberSupport
        public List<RuleAppliedToFacet> coll() {
            return dependantLookup.findDependants(
                RuleAppliedToFacet.class,
                RuleAppliedToFacet_facet.class,
                RuleAppliedToFacet_facet::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Facet_dependentRuleAppliedToFacetsMappedByFacetWhereTheRuleMustBeAppliedObj {
        @Inject
        DependantLookupService dependantLookup;

        private final Facet mixee;

        @MemberSupport
        public List<RuleAppliedToFacets> coll() {
            return dependantLookup.findDependants(
                RuleAppliedToFacets.class,
                RuleAppliedToFacets_facetWhereTheRuleMustBeAppliedObj.class,
                RuleAppliedToFacets_facetWhereTheRuleMustBeAppliedObj::prop,
                mixee);
        }
    }

    @Collection
    @RequiredArgsConstructor
    public static class Facet_dependentFacetDescriptorThatCannotBeSubstitutedMappedByFacet {
        @Inject
        DependantLookupService dependantLookup;

        private final Facet mixee;

        @MemberSupport
        public List<FacetDescriptorThatCannotBeSubstituted> coll() {
            return dependantLookup.findDependants(
                FacetDescriptorThatCannotBeSubstituted.class,
                FacetDescriptorThatCannotBeSubstituted_facet.class,
                FacetDescriptorThatCannotBeSubstituted_facet::prop,
                mixee);
        }
    }
}
