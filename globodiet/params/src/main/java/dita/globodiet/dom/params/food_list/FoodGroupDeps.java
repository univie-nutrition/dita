/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.dom.params.food_list;

import dita.globodiet.dom.params.food_coefficient.PercentOfFatLeftInTheDishForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatLeftInTheDishForFood_fatGroup;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_foodGroup;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssGroup;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood_fatGroup;
import dita.globodiet.dom.params.food_coefficient.PercentOfFatUseDuringCookingForFood_foodGroup;
import dita.globodiet.dom.params.food_descript.FoodBrand;
import dita.globodiet.dom.params.food_descript.FoodBrand_foodGroup;
import dita.globodiet.dom.params.food_descript.FoodFacetRule;
import dita.globodiet.dom.params.food_descript.FoodFacetRule_foodGroup;
import dita.globodiet.dom.params.food_descript.ImprobableSequenceOfFacetAndDescriptor;
import dita.globodiet.dom.params.food_descript.ImprobableSequenceOfFacetAndDescriptor_foodGroup;
import dita.globodiet.dom.params.nutrient.NutrientForFoodOrGroup;
import dita.globodiet.dom.params.nutrient.NutrientForFoodOrGroup_foodOrRecipeGroup;
import dita.globodiet.dom.params.pathway.FacetDescriptorPathwayForFoodGroup;
import dita.globodiet.dom.params.pathway.FacetDescriptorPathwayForFoodGroup_foodGroup;
import dita.globodiet.dom.params.pathway.ProbingQuestionPathwayForFood;
import dita.globodiet.dom.params.pathway.ProbingQuestionPathwayForFood_foodGroup;
import dita.globodiet.dom.params.pathway.QuantificationMethodPathwayForFoodGroup;
import dita.globodiet.dom.params.pathway.QuantificationMethodPathwayForFoodGroup_foodGroup;
import dita.globodiet.dom.params.quantif.MaximumValueForFoodOrGroup;
import dita.globodiet.dom.params.quantif.MaximumValueForFoodOrGroup_foodGroup;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe;
import dita.globodiet.dom.params.recipe_coefficient.PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssGroup;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient;
import dita.globodiet.dom.params.recipe_list.RecipeIngredient_foodOrRecipeGroup;
import dita.globodiet.dom.params.setting.GroupSubstitution;
import dita.globodiet.dom.params.setting.GroupSubstitution_foodGroup;
import jakarta.inject.Inject;
import java.lang.Class;
import java.util.List;
import lombok.RequiredArgsConstructor;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.CollectionLayout;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.commons.collections.Can;
import org.causewaystuff.domsupport.decorate.CollectionTitleDecorator;
import org.causewaystuff.domsupport.services.lookup.DependantLookupService;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FoodGroupDeps {
    public static Can<Class<?>> mixinClasses() {
        return Can.of(FoodGroup_dependentPercentOfFatLeftInTheDishForFoodMappedByFatGroup.class,
        FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFoodGroup.class,
        FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFssGroup.class,
        FoodGroup_dependentPercentOfFatUseDuringCookingForFoodMappedByFoodGroup.class,
        FoodGroup_dependentPercentOfFatUseDuringCookingForFoodMappedByFatGroup.class,
        FoodGroup_dependentFoodBrandMappedByFoodGroup.class,
        FoodGroup_dependentFoodFacetRuleMappedByFoodGroup.class,
        FoodGroup_dependentImprobableSequenceOfFacetAndDescriptorMappedByFoodGroup.class,
        FoodGroup_dependentFoodMappedByFoodGroup.class,
        FoodGroup_dependentFoodSubgroupMappedByFoodGroup.class,
        FoodGroup_dependentNutrientForFoodOrGroupMappedByFoodOrRecipeGroup.class,
        FoodGroup_dependentFacetDescriptorPathwayForFoodGroupMappedByFoodGroup.class,
        FoodGroup_dependentProbingQuestionPathwayForFoodMappedByFoodGroup.class,
        FoodGroup_dependentQuantificationMethodPathwayForFoodGroupMappedByFoodGroup.class,
        FoodGroup_dependentMaximumValueForFoodOrGroupMappedByFoodGroup.class,
        FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByFssGroup.class,
        FoodGroup_dependentRecipeIngredientMappedByFoodOrRecipeGroup.class,
        FoodGroup_dependentGroupSubstitutionMappedByFoodGroup.class);
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatLeftInTheDishForFoodMappedByFatGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatLeftInTheDishForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatLeftInTheDishForFood.class,
                PercentOfFatLeftInTheDishForFood_fatGroup.class,
                PercentOfFatLeftInTheDishForFood_fatGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_foodGroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForFoodMappedByFssGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssGroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForFood_fssGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatUseDuringCookingForFoodMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatUseDuringCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatUseDuringCookingForFood.class,
                PercentOfFatUseDuringCookingForFood_foodGroup.class,
                PercentOfFatUseDuringCookingForFood_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatUseDuringCookingForFoodMappedByFatGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatUseDuringCookingForFood> coll() {
            return dependantLookup.findDependants(
                PercentOfFatUseDuringCookingForFood.class,
                PercentOfFatUseDuringCookingForFood_fatGroup.class,
                PercentOfFatUseDuringCookingForFood_fatGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentFoodBrandMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<FoodBrand> coll() {
            return dependantLookup.findDependants(
                FoodBrand.class,
                FoodBrand_foodGroup.class,
                FoodBrand_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentFoodFacetRuleMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<FoodFacetRule> coll() {
            return dependantLookup.findDependants(
                FoodFacetRule.class,
                FoodFacetRule_foodGroup.class,
                FoodFacetRule_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentImprobableSequenceOfFacetAndDescriptorMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<ImprobableSequenceOfFacetAndDescriptor> coll() {
            return dependantLookup.findDependants(
                ImprobableSequenceOfFacetAndDescriptor.class,
                ImprobableSequenceOfFacetAndDescriptor_foodGroup.class,
                ImprobableSequenceOfFacetAndDescriptor_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentFoodMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<Food> coll() {
            return dependantLookup.findDependants(
                Food.class,
                Food_foodGroup.class,
                Food_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentFoodSubgroupMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<FoodSubgroup> coll() {
            return dependantLookup.findDependants(
                FoodSubgroup.class,
                FoodSubgroup_foodGroup.class,
                FoodSubgroup_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentNutrientForFoodOrGroupMappedByFoodOrRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<NutrientForFoodOrGroup> coll() {
            return dependantLookup.findDependants(
                NutrientForFoodOrGroup.class,
                NutrientForFoodOrGroup_foodOrRecipeGroup.class,
                NutrientForFoodOrGroup_foodOrRecipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentFacetDescriptorPathwayForFoodGroupMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<FacetDescriptorPathwayForFoodGroup> coll() {
            return dependantLookup.findDependants(
                FacetDescriptorPathwayForFoodGroup.class,
                FacetDescriptorPathwayForFoodGroup_foodGroup.class,
                FacetDescriptorPathwayForFoodGroup_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentProbingQuestionPathwayForFoodMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<ProbingQuestionPathwayForFood> coll() {
            return dependantLookup.findDependants(
                ProbingQuestionPathwayForFood.class,
                ProbingQuestionPathwayForFood_foodGroup.class,
                ProbingQuestionPathwayForFood_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentQuantificationMethodPathwayForFoodGroupMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<QuantificationMethodPathwayForFoodGroup> coll() {
            return dependantLookup.findDependants(
                QuantificationMethodPathwayForFoodGroup.class,
                QuantificationMethodPathwayForFoodGroup_foodGroup.class,
                QuantificationMethodPathwayForFoodGroup_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentMaximumValueForFoodOrGroupMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<MaximumValueForFoodOrGroup> coll() {
            return dependantLookup.findDependants(
                MaximumValueForFoodOrGroup.class,
                MaximumValueForFoodOrGroup_foodGroup.class,
                MaximumValueForFoodOrGroup_foodGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentPercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipeMappedByFssGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe> coll() {
            return dependantLookup.findDependants(
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssGroup.class,
                PercentOfFatOrSauceOrSweetenerAddedAfterCookingForRecipe_fssGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentRecipeIngredientMappedByFoodOrRecipeGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<RecipeIngredient> coll() {
            return dependantLookup.findDependants(
                RecipeIngredient.class,
                RecipeIngredient_foodOrRecipeGroup.class,
                RecipeIngredient_foodOrRecipeGroup::prop,
                mixee);
        }
    }

    @Collection
    @CollectionLayout(
            tableDecorator = CollectionTitleDecorator.class
    )
    @RequiredArgsConstructor
    public static class FoodGroup_dependentGroupSubstitutionMappedByFoodGroup {
        @Inject
        DependantLookupService dependantLookup;

        private final FoodGroup mixee;

        @MemberSupport
        public List<GroupSubstitution> coll() {
            return dependantLookup.findDependants(
                GroupSubstitution.class,
                GroupSubstitution_foodGroup.class,
                GroupSubstitution_foodGroup::prop,
                mixee);
        }
    }
}
