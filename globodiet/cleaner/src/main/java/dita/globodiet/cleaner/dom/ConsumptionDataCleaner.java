/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.cleaner.dom;

import dita.globodiet.params.recipe_list.Recipe;
import dita.globodiet.survey.dom.Survey;
import io.github.causewaystuff.companion.applib.jpa.Persistable;
import io.github.causewaystuff.companion.applib.services.lookup.Cloneable;
import io.github.causewaystuff.companion.applib.services.lookup.HasSecondaryKey;
import io.github.causewaystuff.companion.applib.services.lookup.ISecondaryKey;
import io.github.causewaystuff.companion.applib.services.search.SearchService;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.persistence.UniqueConstraint;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.causeway.applib.ViewModel;
import org.apache.causeway.applib.annotation.Collection;
import org.apache.causeway.applib.annotation.DomainObject;
import org.apache.causeway.applib.annotation.DomainObjectLayout;
import org.apache.causeway.applib.annotation.Editing;
import org.apache.causeway.applib.annotation.Nature;
import org.apache.causeway.applib.annotation.Navigable;
import org.apache.causeway.applib.annotation.ObjectSupport;
import org.apache.causeway.applib.annotation.Optionality;
import org.apache.causeway.applib.annotation.Parameter;
import org.apache.causeway.applib.annotation.ParameterLayout;
import org.apache.causeway.applib.annotation.PrecedingParamsPolicy;
import org.apache.causeway.applib.annotation.Programmatic;
import org.apache.causeway.applib.annotation.Property;
import org.apache.causeway.applib.annotation.PropertyLayout;
import org.apache.causeway.applib.annotation.Snapshot;
import org.apache.causeway.applib.annotation.Where;
import org.apache.causeway.applib.services.repository.RepositoryService;

/**
 * A consumption data cleaner references a specific composite consumption within a survey,
 * which needs correction.
 */
@Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity")
@Named("dita.globodiet.cleaner.dom.ConsumptionDataCleaner")
@DomainObject
@DomainObjectLayout(
        describedAs = "A consumption data cleaner references a specific composite consumption within a survey,\n"
                + "which needs correction.",
        cssClassFa = "solid users-viewfinder .campaign-color,\n"
                + "solid broom .consumptionDataCleaner-color .ov-size-60 .ov-right-55 .ov-bottom-55\n"
)
@Entity
@Table(
        name = "ConsumptionDataCleaner",
        uniqueConstraints = @UniqueConstraint(
                name = "SEC_KEY_UNQ_ConsumptionDataCleaner",
                columnNames = {
                        "`SURVEY`",
                        "`R_IDNUM`",
                        "`VERSION`",
                        "`PROTOCOL`",
                        "`MEAL_ORDINAL`"
                }
        )
)
public class ConsumptionDataCleaner implements Persistable, Cloneable<ConsumptionDataCleaner>, HasSecondaryKey<ConsumptionDataCleaner> {
    @Inject
    @Transient
    RepositoryService repositoryService;

    @Inject
    @Transient
    SearchService searchService;

    @Id
    @GeneratedValue(
            strategy = GenerationType.IDENTITY
    )
    private long id;

    /**
     * Survey code
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "1",
            describedAs = "Survey code",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "\"SURVEY\"",
            nullable = false,
            length = 20
    )
    @Getter
    @Setter
    private String surveyCode;

    /**
     * Recipe ID number this cleaner references
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "2",
            describedAs = "Recipe ID number this cleaner references",
            hidden = Where.ALL_TABLES
    )
    @Column(
            name = "\"R_IDNUM\"",
            nullable = false,
            length = 5
    )
    @Getter
    @Setter
    private String recipeCode;

    /**
     * Version of this cleaner. Newer (higher) versions override older ones.
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "3",
            describedAs = "Version of this cleaner. Newer (higher) versions override older ones."
    )
    @Column(
            name = "\"VERSION\"",
            nullable = false
    )
    @Getter
    @Setter
    private int version;

    /**
     * Interview protocol of this cleaner task.
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "4",
            describedAs = "Interview protocol of this cleaner task."
    )
    @Column(
            name = "\"PROTOCOL\"",
            nullable = false,
            length = 120
    )
    @Getter
    @Setter
    private String protocol;

    /**
     * Dewey ordinal referenced the meal within the interview protocol of this cleaner task.
     */
    @Property(
            optionality = Optionality.MANDATORY
    )
    @PropertyLayout(
            fieldSetId = "identity",
            sequence = "5",
            describedAs = "Dewey ordinal referenced the meal within the interview protocol of this cleaner task."
    )
    @Column(
            name = "\"MEAL_ORDINAL\"",
            nullable = false,
            length = 20
    )
    @Getter
    @Setter
    private String mealOrdinal;

    /**
     * State of this cleaner task.
     */
    @Property(
            optionality = Optionality.MANDATORY,
            editing = Editing.ENABLED
    )
    @PropertyLayout(
            fieldSetId = "details",
            sequence = "6",
            describedAs = "State of this cleaner task."
    )
    @Column(
            name = "\"STATE\"",
            nullable = false,
            length = 120
    )
    @Getter
    @Setter
    private String state;

    @ObjectSupport
    public String title() {
        return this.toString();
    }

    @Override
    public String toString() {
        return "ConsumptionDataCleaner(" + "surveyCode=" + getSurveyCode() + ","
         +"recipeCode=" + getRecipeCode() + ","
         +"version=" + getVersion() + ","
         +"protocol=" + getProtocol() + ","
         +"mealOrdinal=" + getMealOrdinal() + ","
         +"state=" + getState() + ")";
    }

    @Programmatic
    @Override
    public ConsumptionDataCleaner copy() {
        var copy = repositoryService.detachedEntity(new ConsumptionDataCleaner());
        copy.setSurveyCode(getSurveyCode());
        copy.setRecipeCode(getRecipeCode());
        copy.setVersion(getVersion());
        copy.setProtocol(getProtocol());
        copy.setMealOrdinal(getMealOrdinal());
        copy.setState(getState());
        return copy;
    }

    @Property(
            snapshot = Snapshot.EXCLUDED
    )
    @PropertyLayout(
            hidden = Where.EVERYWHERE,
            navigable = Navigable.PARENT
    )
    @Transient
    public ConsumptionDataCleaner.Manager getNavigableParent() {
        return new ConsumptionDataCleaner.Manager(searchService, "");
    }

    @Programmatic
    public SecondaryKey secondaryKey() {
        return new SecondaryKey(getSurveyCode(), 
        getRecipeCode(), 
        getVersion(), 
        getProtocol(), 
        getMealOrdinal());
    }

    /**
     * Manager Viewmodel for @{link ConsumptionDataCleaner}
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Manager")
    @Named("dita.globodiet.cleaner.dom.ConsumptionDataCleaner.Manager")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            describedAs = "A consumption data cleaner references a specific composite consumption within a survey,\n"
                    + "which needs correction.",
            cssClassFa = "solid users-viewfinder .campaign-color,\n"
                    + "solid broom .consumptionDataCleaner-color .ov-size-60 .ov-right-55 .ov-bottom-55\n"
    )
    @AllArgsConstructor
    public static final class Manager implements ViewModel {
        public final SearchService searchService;

        @Property(
                optionality = Optionality.OPTIONAL,
                editing = Editing.ENABLED
        )
        @PropertyLayout(
                fieldSetId = "searchBar"
        )
        @Getter
        @Setter
        private String search;

        @ObjectSupport
        public String title() {
            return "Manage Consumption Data Cleaner";
        }

        @Collection
        public final List<ConsumptionDataCleaner> getListOfConsumptionDataCleaner() {
            return searchService.search(ConsumptionDataCleaner.class, ConsumptionDataCleaner::title, search);
        }

        @Override
        public final String viewModelMemento() {
            return getSearch();
        }
    }

    /**
     * Parameter model for @{link ConsumptionDataCleaner}
     *
     * @param survey Survey code
     * @param recipe Recipe ID number this cleaner references
     * @param version Version of this cleaner. Newer (higher) versions override older ones.
     * @param protocol Interview protocol of this cleaner task.
     * @param mealOrdinal Dewey ordinal referenced the meal within the interview protocol of this cleaner task.
     * @param state State of this cleaner task.
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Params")
    public final record Params(
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Survey code") Survey survey,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Recipe ID number this cleaner references") Recipe recipe,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Version of this cleaner. Newer (higher) versions override older ones.") int version,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Interview protocol of this cleaner task.") String protocol,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "Dewey ordinal referenced the meal within the interview protocol of this cleaner task.") String mealOrdinal,
            @Parameter(precedingParamsPolicy = PrecedingParamsPolicy.PRESERVE_CHANGES, optionality = Optionality.MANDATORY) @ParameterLayout(describedAs = "State of this cleaner task.") String state
    ) {
    }

    /**
     * SecondaryKey for @{link ConsumptionDataCleaner}
     *
     * @param surveyCode Survey code
     * @param recipeCode Recipe ID number this cleaner references
     * @param version Version of this cleaner. Newer (higher) versions override older ones.
     * @param protocol Interview protocol of this cleaner task.
     * @param mealOrdinal Dewey ordinal referenced the meal within the interview protocol of this cleaner task.
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_SecondaryKey")
    public final record SecondaryKey(
            String surveyCode,
            String recipeCode,
            int version,
            String protocol,
            String mealOrdinal
    ) implements ISecondaryKey<ConsumptionDataCleaner> {
        @Override
        public Class<ConsumptionDataCleaner> correspondingClass() {
            return ConsumptionDataCleaner.class;
        }

        @Override
        public final Unresolvable unresolvable() {
            return new Unresolvable(String.format("UNRESOLVABLE %s%s",
                correspondingClass().getSimpleName(),
                this.toString().substring(12)));
        }
    }

    /**
     * Placeholder @{link ViewModel} for @{link ConsumptionDataCleaner} in case of an unresolvable secondary key.
     */
    @Generated("io.github.causewaystuff.companion.codegen.domgen._GenEntity_Unresolvable")
    @DomainObject(
            nature = Nature.VIEW_MODEL
    )
    @DomainObjectLayout(
            named = "Unresolvable ConsumptionDataCleaner",
            describedAs = "Unresolvable ConsumptionDataCleaner",
            cssClassFa = "skull .unresolvable-color"
    )
    @Named("dita.globodiet.cleaner.dom.ConsumptionDataCleaner.Unresolvable")
    @Embeddable
    @RequiredArgsConstructor
    public static final class Unresolvable extends ConsumptionDataCleaner implements ViewModel {
        @Getter(
                onMethod_ = {@Override}
        )
        @Accessors(
                fluent = true
        )
        private final String viewModelMemento;

        @Override
        public String title() {
            return viewModelMemento;
        }
    }
}
