/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.cleaner.dom;

import java.util.List;

import jakarta.inject.Inject;

import org.springframework.beans.factory.annotation.Qualifier;

import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.ActionLayout;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.annotation.SemanticsOf;
import org.apache.causeway.applib.services.factory.FactoryService;
import org.apache.causeway.applib.services.repository.RepositoryService;
import org.apache.causeway.commons.collections.Can;

import lombok.RequiredArgsConstructor;

import dita.globodiet.survey.dom.Campaign;
import dita.globodiet.survey.dom.Campaigns;
import dita.globodiet.survey.dom.ReportContext;
import dita.globodiet.survey.dom.Survey;
import dita.globodiet.survey.view.SurveyTreeHelperService;
import dita.recall24.dto.Interview24;
import dita.recall24.dto.Meal24;
import dita.recall24.dto.MemorizedFood24;
import dita.recall24.dto.Record24.Composite;
import io.github.causewaystuff.blobstore.applib.BlobStore;
import io.github.causewaystuff.companion.applib.services.lookup.ForeignKeyLookupService;
import io.github.causewaystuff.companion.applib.services.search.SearchService;

@Action(
        semantics = SemanticsOf.IDEMPOTENT)
@ActionLayout(
        fieldSetId = "listOfConsumptionDataCleaner",
        sequence = "1",
        describedAs = "Looks into all interviews of a given survey "
            + "and creates a cleaner for each defect and matching consumption, "
            + "not overriding any existing cleaner of the same version",
        position = ActionLayout.Position.PANEL
)
@RequiredArgsConstructor
public class ConsumptionDataCleanerManager_createCleaner {

    @Inject private SearchService searchService;
    @Inject private RepositoryService repositoryService;
    @Inject private ForeignKeyLookupService foreignKeyLookup;
    @Inject @Qualifier("survey") private BlobStore surveyBlobStore;
    @Inject private FactoryService factoryService;
    @Inject private SurveyTreeHelperService surveyTreeRootNodeHelperService;


    private final ConsumptionDataCleaner.Manager mixee;

    @MemberSupport
    public ConsumptionDataCleaner.Manager act(final Survey survey) {

        var campaignKeys = Campaigns.listAll(factoryService, survey)
            .map(Campaign::secondaryKey);
        var reportContext = ReportContext.load(campaignKeys, surveyBlobStore, null);
        var interviewSet = reportContext.interviewSet();

        System.err.printf("--- %s%n", "START");

        interviewSet.streamInterviews()
            .map(Interview24::meals)
            .flatMap(Can::stream)
            .map(Meal24::memorizedFood)
            .flatMap(Can::stream)
            .map(MemorizedFood24::topLevelRecords)
            .flatMap(Can::stream)
            .forEach(topLevelRecord->{
                if(topLevelRecord instanceof Composite composite) {
                    //System.err.printf("- rec %s%n", topLevelRecord.sid());
                    if("00473".equals(composite.sid().objectId().objectSimpleId())) {
                        System.err.printf("potential match %s%n", composite);
                    }
                }
            });

        System.err.printf("--- %s%n", "END");


        return mixee;
    }

    @MemberSupport
    public List<Survey> choicesSurvey() {
        return repositoryService.allInstances(Survey.class);
    }

}
