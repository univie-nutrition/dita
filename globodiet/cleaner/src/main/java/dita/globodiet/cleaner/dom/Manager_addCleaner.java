/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// Auto-generated by Causeway-Stuff code generator.
package dita.globodiet.cleaner.dom;

import java.util.List;

import jakarta.inject.Inject;

import org.apache.causeway.applib.annotation.Action;
import org.apache.causeway.applib.annotation.ActionLayout;
import org.apache.causeway.applib.annotation.MemberSupport;
import org.apache.causeway.applib.annotation.MinLength;
import org.apache.causeway.applib.annotation.ParameterTuple;
import org.apache.causeway.applib.annotation.SemanticsOf;
import org.apache.causeway.applib.services.repository.RepositoryService;

import lombok.RequiredArgsConstructor;

import dita.globodiet.params.recipe_list.Recipe;
import dita.globodiet.survey.dom.Survey;
import io.github.causewaystuff.companion.applib.services.lookup.ForeignKeyLookupService;
import io.github.causewaystuff.companion.applib.services.search.SearchService;

@Action(
        semantics = SemanticsOf.IDEMPOTENT)
@ActionLayout(
        fieldSetId = "listOfConsumptionDataCleaner",
        sequence = "1",
        describedAs = "Adds a new Consumption Data Cleaner to a Survey",
        position = ActionLayout.Position.PANEL
)
@RequiredArgsConstructor
public class Manager_addCleaner {

    @Inject private SearchService searchService;
    @Inject private RepositoryService repositoryService;
    @Inject private ForeignKeyLookupService foreignKeyLookup;

    private final ConsumptionDataCleaner.Manager mixee;

    @MemberSupport
    public ConsumptionDataCleaner.Manager act(@ParameterTuple final ConsumptionDataCleaner.Params p) {

        var cleaner = repositoryService.detachedEntity(new ConsumptionDataCleaner());
        cleaner.setSurveyCode(p.survey().secondaryKey().code());
        cleaner.setRecipeCode(p.recipe().secondaryKey().code());
        cleaner.setName(p.name());
        cleaner.setDescription(p.description());

        repositoryService.persist(cleaner);
        foreignKeyLookup.clearCache(ConsumptionDataCleaner.class);
        return mixee;
    }

    @MemberSupport
    public List<Survey> choicesSurvey() {
        return repositoryService.allInstances(Survey.class);
    }

    @MemberSupport
    public List<Recipe> autoCompleteRecipe(@MinLength(3) final String search) {
        return searchService.search(Recipe.class, Recipe::title, search);
    }

}
